package it.gov.mef.noipa.postemissione.pe_depconconverterbatch.batch.cedolino;

import it.gov.mef.noipa.postemissione.parser.autogenerated.cedolino.cedolino.AnagraficaType;
import it.gov.mef.noipa.postemissione.parser.autogenerated.cedolino.cedolino.CedolinoType;
import it.gov.mef.noipa.postemissione.parser.autogenerated.cedolino.cedolino.CedolinoType.ContrattiVigenti;
import it.gov.mef.noipa.postemissione.parser.autogenerated.cedolino.cedolino.CedolinoType.DettDetrazioni;
import it.gov.mef.noipa.postemissione.parser.autogenerated.cedolino.cedolino.CedolinoType.DettaglioRetribuzione.GruppoDettaglioRetribuzione;
import it.gov.mef.noipa.postemissione.parser.autogenerated.cedolino.cedolino.CedolinoType.DettaglioRetribuzione.GruppoDettaglioRetribuzione.DatiDettaglioRetribuzione;
import it.gov.mef.noipa.postemissione.parser.autogenerated.cedolino.cedolino.CedolinoType.DettaglioRetribuzione.GruppoDettaglioRetribuzione.DatiDettaglioRetribuzione.DettaglioCompetenze;
import it.gov.mef.noipa.postemissione.parser.autogenerated.cedolino.cedolino.CedolinoType.DettaglioRetribuzione.GruppoDettaglioRetribuzione.DatiDettaglioRetribuzione.DettaglioRitenute;
import it.gov.mef.noipa.postemissione.parser.autogenerated.cedolino.cedolino.CedolinoType.EstrPagam;
import it.gov.mef.noipa.postemissione.parser.autogenerated.cedolino.cedolino.CedolinoType.Messaggi;
import it.gov.mef.noipa.postemissione.parser.autogenerated.cedolino.cedolino.CedolinoType.PerContoDi;
import it.gov.mef.noipa.postemissione.parser.autogenerated.cedolino.cedolino.CedolinoType.PosGiurEco;
import it.gov.mef.noipa.postemissione.parser.autogenerated.cedolino.cedolino.CedolinoType.Progressivi;
import it.gov.mef.noipa.postemissione.parser.autogenerated.cedolino.cedolino.CedolinoType.RiepilogoRetribuzione.DatiRiepilogoRetribuzione;
import it.gov.mef.noipa.postemissione.parser.autogenerated.cedolino.cedolino.CedolinoType.Testata;
import it.gov.mef.noipa.postemissione.parser.autogenerated.cedolino.cedolino.CedolinoType.Testata.EnteApp;
import it.gov.mef.noipa.postemissione.parser.autogenerated.cedolino.cedolino.CedolinoType.Tfr;
import it.gov.mef.noipa.postemissione.parser.autogenerated.cedolino.cedolino.CedolinoType.Totali;
import it.gov.mef.noipa.postemissione.parser.autogenerated.cedolino.cedolino.DettaglioImporto;
import it.gov.mef.noipa.postemissione.parser.autogenerated.cedolino.cedolino.LINGUATYPE;
import it.gov.mef.noipa.postemissione.parser.autogenerated.cedolino.cedolino.MatricolaType;
import it.gov.mef.noipa.postemissione.parser.autogenerated.cedolino.depcon.COV;
import it.gov.mef.noipa.postemissione.parser.autogenerated.cedolino.depcon.CedolinoDepcon;
import it.gov.mef.noipa.postemissione.parser.autogenerated.cedolino.depcon.DettaglioAliquota;
import it.gov.mef.noipa.postemissione.parser.autogenerated.cedolino.depcon.DettaglioAliquotaRitenuta;
import it.gov.mef.noipa.postemissione.parser.autogenerated.cedolino.depcon.DettaglioCompetenzaRitenuta;
import it.gov.mef.noipa.postemissione.parser.autogenerated.cedolino.depcon.DettaglioCompetenzeRitenute;
import it.gov.mef.noipa.postemissione.parser.autogenerated.cedolino.depcon.DettaglioCompetenzeRitenuteChoice;
import it.gov.mef.noipa.postemissione.parser.autogenerated.cedolino.depcon.DettaglioRetribuzione;
import it.gov.mef.noipa.postemissione.parser.autogenerated.cedolino.depcon.Messaggio;
import it.gov.mef.noipa.postemissione.parser.autogenerated.cedolino.depcon.RIF;
import it.gov.mef.noipa.postemissione.parser.autogenerated.cedolino.depcon.RiepilogoRetribuzione;
import it.gov.mef.noipa.postemissione.parser.autogenerated.cedolino.depcon.RiepilogoRetribuzioneChoice;
import it.gov.mef.noipa.postemissione.parser.autogenerated.cedolino.depcon.types.BarcodeType;
import it.gov.mef.noipa.postemissione.parser.autogenerated.cedolino.depcon.types.ContrattiVigentiType;
import it.gov.mef.noipa.postemissione.parser.autogenerated.cedolino.depcon.types.DetrazioniType;
import it.gov.mef.noipa.postemissione.parser.autogenerated.cedolino.depcon.types.DettaglioAliquotaRitenutaType;
import it.gov.mef.noipa.postemissione.parser.autogenerated.cedolino.depcon.types.DettaglioAliquotaType;
import it.gov.mef.noipa.postemissione.parser.autogenerated.cedolino.depcon.types.DettaglioRitenuteCompetenzeType;
import it.gov.mef.noipa.postemissione.parser.autogenerated.cedolino.depcon.types.EstremiPagamentoType;
import it.gov.mef.noipa.postemissione.parser.autogenerated.cedolino.depcon.types.PosizioneGiuridicoEconomicaType;
import it.gov.mef.noipa.postemissione.parser.autogenerated.cedolino.depcon.types.TFRType;
import it.gov.mef.noipa.postemissione.parser.autogenerated.cedolino.depcon.util.ConversionUtils;
import it.gov.mef.noipa.postemissione.pe_depconconverterbatch.batch.Util;
import it.gov.mef.noipa.postemissione.pe_depconconverterbatch.bean.OrigineDati;

import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import org.apache.log4j.Logger;
import org.springframework.batch.item.ItemProcessor;
import org.springframework.core.io.Resource;

public class Processor implements ItemProcessor<CedolinoDepcon, CedolinoType> {

	private static final Logger LOGGER = Logger.getLogger(Processor.class);
	
	private Resource resource;
	private Map<String, OrigineDati> origineDatiMap;
	
	public int i = 1;
	
	public CedolinoType process(CedolinoDepcon type) throws Exception {
		
		LOGGER.debug("Process "+ type.getDatiAnagrafici().getCodiceFiscale());
		long threadId = Thread.currentThread().getId();
		LOGGER.debug("Thread "+ threadId +" #"+i);
	
		CedolinoType cedolino = new CedolinoType();
		
		// TESTATA
		BarcodeType bt = new BarcodeType(type.getBarcode().getBarcode());
		
		cedolino.setTestata(new Testata());
		cedolino.getTestata().setIDCedolino(type.getIdentificativo().getCedolinoId());
		
		LINGUATYPE linguatype = LINGUATYPE.fromValue(type.getIdentificativo().getLingua());
		
		cedolino.getTestata().setLingua(linguatype);
		cedolino.getTestata().setRata(ConversionUtils.convertRata(bt.getMeseDiCompetenza(),bt.getAnnoDiCompetenza()));
		cedolino.getTestata().setDescrRata(type.getIdentificativo().getRata());
		cedolino.getTestata().setBarcode(type.getBarcode().getBarcode());
		
		if (type.getTestataEnte()!= null){
			PerContoDi pcd = new PerContoDi();
			
			if(type.getTestataEnte().getDescrizioneEnte()!=null && !type.getTestataEnte().getDescrizioneEnte().trim().equals("")){
				pcd.setDesEnte(type.getTestataEnte().getDescrizioneEnte().trim());
			}
			if(type.getTestataEnte().getIndirizzoEnte()!=null && !type.getTestataEnte().getIndirizzoEnte().trim().equals("")){
				pcd.setIndEnte(type.getTestataEnte().getIndirizzoEnte().trim());
			}
			cedolino.setPerContoDi(pcd);
		}
			
    	/* Anagrafica */
    	
		AnagraficaType at = new AnagraficaType();
		if (type.getDatiAnagrafici().getCodiceFiscale()!= null){
		at.setCodFiscaleAmministrato(type.getDatiAnagrafici()
				.getCodiceFiscale().trim());
		}
		at.setCognome(Util.clearField(type.getDatiAnagrafici().getCognome()));
		at.setNome(Util.clearField(type.getDatiAnagrafici().getNome()));
		MatricolaType mt = new MatricolaType();
		mt.setIscrizione(type.getDatiAnagrafici().getNumeroPartita().trim());
		at.setMatricola(mt);
		at.setDataNascita(type.getDatiAnagrafici().getDataNascita());
		at.setDomicilioFiscale(type.getDatiAnagrafici()
				.getComuneResidenza().trim());
		cedolino.getTestata().setAnagrafica(at);
    	
    	/*Ente Appartenenza*/
    	
		EnteApp ea = new EnteApp();
		
		if (type.getDatiEnteAppartenza().getCodiceFiscale()!= null){
		ea.setCodFiscEnte(type.getDatiEnteAppartenza().getCodiceFiscale()
				.trim());
		}
		
		ea.setCodEnte(bt.getCodiceEnte());
		ea.setDesEnte(type.getDatiEnteAppartenza().getDescrizione().trim());
		
		ea.setCodUffResp(bt.getCodiceUfficoResponsabile());
		ea.setDesUffResp(type.getDatiEnteAppartenza().getDescrizioneUfficoResponsabile().trim());
		
		if (type.getDatiEnteAppartenza().getCodiceUfficioServizio()!= null){
		//20-11-2015 Modifica introdotta per la normalizzazione del codice a 4 cifre per allinearlo alla banca dati del portale
			if(type.getDatiEnteAppartenza().getCodiceUfficioServizio().trim().length()==3){
				ea.setCodSedeUffServizio("0"+type.getDatiEnteAppartenza().getCodiceUfficioServizio().trim());
			}else{
				ea.setCodSedeUffServizio(type.getDatiEnteAppartenza().getCodiceUfficioServizio().trim());
				
			}
				
		}
		
		if (type.getDatiEnteAppartenza().getCodiceUfficioServizio()!= null){
		ea.setDesSedeUffServizio(type.getDatiEnteAppartenza().getDescrizioneUfficioServizio().trim());
		
		}
		cedolino.getTestata().setEnteApp(ea);
    	/* Posizione Giuridico-Economica */
    	
		PosGiurEco peg = new PosGiurEco();
		PosizioneGiuridicoEconomicaType pegt = new PosizioneGiuridicoEconomicaType(
				type.getPosizioneGiuridicoEconomica().getDettaglio());
		peg.setInquadramento(pegt.getInquadramento().trim());
		if (pegt.getCassaPrevidenza() != null) {
			peg.setCassaPrev(pegt.getCassaPrevidenza().trim());
		}
		peg.setCodQualifica(pegt.getQualifica().trim());
		if (pegt.getScadenza() != null
				&& !pegt.getScadenza().trim().equals("")) {
			peg.setScadenza(pegt.getScadenza());
		}
		
		
		if (pegt.getTipoLiquidazione() != null
				&& !pegt.getTipoLiquidazione().trim().equals("")) {
			peg.setTipoLiquid(pegt.getTipoLiquidazione());
		}
		
		if (pegt.getTipoRapporto() != null
				&& !pegt.getTipoRapporto().trim().equals("")) {
			peg.setTipoRapporto(pegt.getTipoRapporto());
		}
		
		if (pegt.getAdesionePrevComplementare() != null
				&& !pegt.getAdesionePrevComplementare().trim().equals("")) {
			peg.setAdesionePrevCompl(pegt.getAdesionePrevComplementare());
		}
		
		if (pegt.getParametro() != null
				&& !pegt.getParametro().trim().equals("")) {
			peg.setParametro(pegt.getParametro().trim());
		}

		if (pegt.getFascia() != null && !pegt.getFascia().trim().equals("")) {
			peg.setFascia(pegt.getFascia().trim());
		}

		if (pegt.getScatto() != null && !pegt.getScatto().trim().equals("")) {
			peg.setScatto(pegt.getScatto().trim());
		}

		if (pegt.getLivello() != null
				&& !pegt.getLivello().trim().equals("")) {
			peg.setLivello(pegt.getLivello().trim());
		}
		if (type.getBarcode().getScadenza() != null
				&& !type.getBarcode().getScadenza().trim().equals("")) {
			peg.setScadenza(type.getBarcode().getScadenza().trim());
		}
		
		cedolino.setPosGiurEco(peg);

    	/* Dettaglio detrazioni */
		DettDetrazioni dd = new DettDetrazioni();
		DetrazioniType dt = new DetrazioniType(type.getDetrazioni()
				.getDettaglio());

		boolean detrazioniPresenti = false;
		if (dt.getLavoroDipendente() != null
				&& !dt.getLavoroDipendente().trim().equals("")) {
			dd.setLavDip(dt.getLavoroDipendente().trim());
			detrazioniPresenti = true;
		}
		/* Coniuge */
		if (dt.getConiuge() != null && !dt.getConiuge().trim().equals("")) {
			dd.setConiuge(dt.getConiuge().trim());
			detrazioniPresenti = true;
		}
		/* Figli */
		if (dt.getNumeroFigli() != null
				&& !dt.getNumeroFigli().trim().equals("")) {
			dd.setNumeroFigli(dt.getNumeroFigli().trim());
			detrazioniPresenti = true;
		}
		if (dt.getDetrazioneFigli() != null
				&& !dt.getDetrazioneFigli().trim().equals("")) {
			dd.setDetrFigli(dt.getDetrazioneFigli().trim());
			detrazioniPresenti = true;
		}
		/* Figli < 3 anni */
		if (dt.getNumeroFigliMinoiriDi3Anni() != null
				&& !dt.getNumeroFigliMinoiriDi3Anni().trim().equals("")) {
			dd.setMin3Anni(dt.getNumeroFigliMinoiriDi3Anni().trim());
			detrazioniPresenti = true;
		}
		if (dt.getDetrazioneFigliMinoiriDi3Anni() != null
				&& !dt.getDetrazioneFigliMinoiriDi3Anni().trim().equals("")) {
			dd.setDetrMin3Anni(dt.getDetrazioneFigliMinoiriDi3Anni().trim());
			detrazioniPresenti = true;
		}

		/* Altri famigliari */
		if (dt.getNumeroAltriFamigliari() != null
				&& !dt.getNumeroAltriFamigliari().trim().equals("")) {
			dd.setAltriFam(dt.getNumeroAltriFamigliari().trim());
			detrazioniPresenti = true;
		}
		if (dt.getDetrazioneAltriFamigliari() != null
				&& !dt.getDetrazioneAltriFamigliari().trim().equals("")) {
			dd.setDetrAltrFam(dt.getDetrazioneAltriFamigliari().trim());
			detrazioniPresenti = true;
		}
		/* Totale */
		if (dt.getTotale() != null && !dt.getTotale().trim().equals("")) {
			dd.setTotale(dt.getTotale().trim());
			detrazioniPresenti = true;
		}

		if (detrazioniPresenti) {
			cedolino.setDettDetrazioni(dd);
		}
    	
    	/* Estremi di pagamento*/
		EstrPagam ep = new EstrPagam();
		EstremiPagamentoType ept = new EstremiPagamentoType(type
				.getEstremiPagamento().getDettaglio());

		ep.setDescrBanca(ept.getNomeIstituto());
		if (ept.getDataValuta() != null
				&& !ept.getDataValuta().trim().equals("")) {
			ep.setEsigibilita(ept.getDataValuta().trim());
		}
		ep.setIBAN(ept.getIBAN());
		ep.setIndBanca(type.getEstremiPagamento().getIndirizzoIstituto());
		ep.setTipoPagamento(ept.getModalita().trim());
		cedolino.setEstrPagam(ep);
    	
    	/* Dati riepilogativi della retribuzione*/
    	
		Iterator<RiepilogoRetribuzione> rrIterator = type.getRiepilogoRetribuzione().iterator();
		it.gov.mef.noipa.postemissione.parser.autogenerated.cedolino.cedolino.CedolinoType.RiepilogoRetribuzione 
			datirr = new it.gov.mef.noipa.postemissione.parser.autogenerated.cedolino.cedolino.CedolinoType.RiepilogoRetribuzione();
		while (rrIterator.hasNext()) {
			RiepilogoRetribuzione dr0 = (RiepilogoRetribuzione) rrIterator.next();
			
			DatiRiepilogoRetribuzione riepilogoRetribuzione = 
					new DatiRiepilogoRetribuzione();
			riepilogoRetribuzione.setDescrizioneTipo(dr0.getLabel());
			
			Iterator<RiepilogoRetribuzioneChoice> rrChoice = dr0.getRiepilogoRetribuzione().iterator();
			
			while (rrChoice.hasNext()) {
				
				RiepilogoRetribuzioneChoice dr1 = (RiepilogoRetribuzioneChoice) rrChoice.next();
				if (dr1.getCompetenzeFisse() != null) {
					it.gov.mef.noipa.postemissione.parser.autogenerated.cedolino.cedolino.CedolinoType.RiepilogoRetribuzione.DatiRiepilogoRetribuzione.Competenze 
						competenza = new it.gov.mef.noipa.postemissione.parser.autogenerated.cedolino.cedolino.CedolinoType.RiepilogoRetribuzione.DatiRiepilogoRetribuzione.Competenze();
					competenza.setDescrizione(dr1.getCompetenzeFisse().getDescrizione().trim());
					competenza.setImporto(dr1.getCompetenzeFisse().getImporto().trim());
					riepilogoRetribuzione.getCompetenze().add(competenza);

				}

				if (dr1.getRitenute() != null) {
					it.gov.mef.noipa.postemissione.parser.autogenerated.cedolino.cedolino.CedolinoType.RiepilogoRetribuzione.DatiRiepilogoRetribuzione.Ritenute 
						ritenuta = new it.gov.mef.noipa.postemissione.parser.autogenerated.cedolino.cedolino.CedolinoType.RiepilogoRetribuzione.DatiRiepilogoRetribuzione.Ritenute();
					ritenuta.setDescrizione(dr1.getRitenute().getDescrizione().trim());
					ritenuta.setImporto(dr1.getRitenute().getImporto().trim());
					riepilogoRetribuzione.getRitenute().add(ritenuta);

				}
				
				
				if (dr1.getRiemissionePerStorno() != null) {
					it.gov.mef.noipa.postemissione.parser.autogenerated.cedolino.cedolino.CedolinoType.RiepilogoRetribuzione.DatiRiepilogoRetribuzione.Competenze 
					competenza = new it.gov.mef.noipa.postemissione.parser.autogenerated.cedolino.cedolino.CedolinoType.RiepilogoRetribuzione.DatiRiepilogoRetribuzione.Competenze();
					competenza.setDescrizione(dr1.getRiemissionePerStorno().getDescrizione().trim());
					competenza.setImporto(dr1.getRiemissionePerStorno().getImporto().trim());
					riepilogoRetribuzione.getCompetenze().add(competenza);
				}
				
				
				
				if (dr1.getCompetenzeAccessorieConguagli() != null) {
					if (dr1.getCompetenzeAccessorieConguagli()
							.getImportoNegativo() != null
							&& !dr1.getCompetenzeAccessorieConguagli()
									.getImportoNegativo().trim().equals("")) {
						
						it.gov.mef.noipa.postemissione.parser.autogenerated.cedolino.cedolino.CedolinoType.RiepilogoRetribuzione.DatiRiepilogoRetribuzione.Ritenute 
							ritenuta = new it.gov.mef.noipa.postemissione.parser.autogenerated.cedolino.cedolino.CedolinoType.RiepilogoRetribuzione.DatiRiepilogoRetribuzione.Ritenute();
						ritenuta.setDescrizione(dr1.getCompetenzeAccessorieConguagli().getDescrizione().trim());
						ritenuta.setImporto(dr1.getCompetenzeAccessorieConguagli().getImportoNegativo().trim());
						riepilogoRetribuzione.getRitenute().add(ritenuta);
													
					}
					
					if (dr1.getCompetenzeAccessorieConguagli()
							.getImportoPositivo() != null
							&& !dr1.getCompetenzeAccessorieConguagli()
									.getImportoPositivo().trim().equals("")) {

						it.gov.mef.noipa.postemissione.parser.autogenerated.cedolino.cedolino.CedolinoType.RiepilogoRetribuzione.DatiRiepilogoRetribuzione.Competenze 
							competenza = new it.gov.mef.noipa.postemissione.parser.autogenerated.cedolino.cedolino.CedolinoType.RiepilogoRetribuzione.DatiRiepilogoRetribuzione.Competenze();
					
						competenza.setDescrizione(dr1.getCompetenzeAccessorieConguagli().getDescrizione().trim());
						competenza.setImporto(dr1.getCompetenzeAccessorieConguagli().getImportoPositivo().trim());
						riepilogoRetribuzione.getCompetenze().add(competenza);
						
					}

					
				}
				
			}
			datirr.getDatiRiepilogoRetribuzione().add(riepilogoRetribuzione);
			
		}
		cedolino.setRiepilogoRetribuzione(datirr);
		 
		/* Dati di dettaglio della retribuzione */

		if(!type.getDettaglioRetribuzione().isEmpty()){
			Iterator<DettaglioRetribuzione> drIterator = type.getDettaglioRetribuzione().iterator();
			it.gov.mef.noipa.postemissione.parser.autogenerated.cedolino.cedolino.CedolinoType.DettaglioRetribuzione
				dettRetribuzione = new it.gov.mef.noipa.postemissione.parser.autogenerated.cedolino.cedolino.CedolinoType.DettaglioRetribuzione();
						
			while (drIterator.hasNext()) {
				DettaglioRetribuzione dr0 = (DettaglioRetribuzione) drIterator.next();
				
				GruppoDettaglioRetribuzione gruppo = new GruppoDettaglioRetribuzione();
				gruppo.setDescrizioneGruppo(dr0.getDescrizione());
				
				Iterator<DettaglioCompetenzeRitenute> dr1Iterator = dr0.getDettaglioCompetenzaRitenuta().iterator();
				
				while(dr1Iterator.hasNext()){
					DettaglioCompetenzeRitenute dr1 = dr1Iterator.next();
					
					Iterator<DettaglioCompetenzeRitenuteChoice> dcrChoice = dr1.getDettaglioCompetenzaRitenutaChoice().iterator();
					DatiDettaglioRetribuzione datiDettaglioRetribuzione = new DatiDettaglioRetribuzione();
					datiDettaglioRetribuzione.setDescrizioneTipo(dr1.getDescrizione());
					
					while (dcrChoice.hasNext()) {
						
						
						DettaglioCompetenzeRitenuteChoice dcrc = dcrChoice.next();
						if (dcrc.getDettaglioCompetenzaRitenuta() != null && dcrc.getDettaglioCompetenzaRitenuta().size()>0) {
							DettaglioRitenute dr = new DettaglioRitenute();
							DettaglioCompetenze dc = new DettaglioCompetenze();
							Iterator<DettaglioCompetenzaRitenuta> dcri = dcrc.getDettaglioCompetenzaRitenuta().iterator();
							
							while (dcri.hasNext()) {
								DettaglioRitenuteCompetenzeType dcr = new DettaglioRitenuteCompetenzeType(dcri.next().getDettaglio());
									
								DettaglioImporto di = new DettaglioImporto();
								
								if(dcr.getImporto()!=null){
									di.setImporto(dcr.getImporto().trim());
								}
								if(dcr.getCodice()!=null){
									di.setCodice(dcr.getCodice().trim());
								}
								if(dcr.getDescrizione()!=null){
									di.setDescrizione(dcr.getDescrizione().trim());
								}
								if(dcr.isRitenuta()){
									dr.getImporti().add(di);
									
								} else{
									dc.getImporti().add(di);
								}

							}
							if(dr.getImporti().size()>0) {
								datiDettaglioRetribuzione.getDettaglioRitenute().add(dr);
							}
							if(dc.getImporti().size()>0) {
								datiDettaglioRetribuzione.getDettaglioCompetenze().add(dc);
							}
						}
						if (dcrc.getDettaglioAliquota() != null && dcrc.getDettaglioAliquota().size()>0) {
							DettaglioRitenute dr = new DettaglioRitenute();
							Iterator<DettaglioAliquota> dai = dcrc.getDettaglioAliquota().iterator();
							while (dai.hasNext()) {
								DettaglioAliquotaType dat = new DettaglioAliquotaType(dai.next().getDettaglio());
								
								it.gov.mef.noipa.postemissione.parser.autogenerated.cedolino.cedolino.DettaglioAliquota da = new 
										it.gov.mef.noipa.postemissione.parser.autogenerated.cedolino.cedolino.DettaglioAliquota();
								
								da.setAliquota(dat.getAliquota().trim());
								da.setDescrizione(dat.getDescrizione().trim());
								da.setImponibile(dat.getImponibile().trim());
								da.setImporto(dat.getImporto().trim());
								
								dr.getAliquote().add(da);
							}
							datiDettaglioRetribuzione.getDettaglioRitenute().add(dr);	
						}
						if (dcrc.getDettaglioAliquotaRitenuta() != null && dcrc.getDettaglioAliquotaRitenuta().size()>0) {
							DettaglioRitenute dr = new DettaglioRitenute();
							Iterator<DettaglioAliquotaRitenuta> dai = dcrc.getDettaglioAliquotaRitenuta().iterator();
							while (dai.hasNext()) {
								DettaglioAliquotaRitenutaType dat = new DettaglioAliquotaRitenutaType(dai.next().getDettaglio());
								
								it.gov.mef.noipa.postemissione.parser.autogenerated.cedolino.cedolino.DettaglioAliquota da = new 
										it.gov.mef.noipa.postemissione.parser.autogenerated.cedolino.cedolino.DettaglioAliquota();
								
								da.setAliquota(dat.getAliquota().trim());
								da.setDescrizione(dat.getDescrizione().trim());
								da.setImponibile(dat.getImponibile().trim());
								da.setImporto(dat.getImporto().trim());
								
								dr.getAliquote().add(da);
							}
							datiDettaglioRetribuzione.getDettaglioRitenute().add(dr);	
						}
						
					}
					gruppo.getDatiDettaglioRetribuzione().add(datiDettaglioRetribuzione);
				}
				dettRetribuzione.getGruppoDettaglioRetribuzione().add(gruppo);
				
			
			}
			cedolino.setDettaglioRetribuzione(dettRetribuzione);
		}
		
		
		/* Totali */
		Totali tot = new Totali();
		if (dt.getConiuge() != null && !dt.getConiuge().trim().equals("")) {
			dd.setConiuge(dt.getConiuge().trim());
			detrazioniPresenti = true;
		}

		tot.setTotaleCompetenze(type.getTotali().getTotaleCompetenze().trim());
		tot.setTotaleNetto(type.getTotali().getTotaleNetto().trim());
		tot.setTotaleNettoNumber(convertMoneyStringToBigDecimal(tot.getTotaleNetto()));
		tot.setTotaleRitenute(type.getTotali().getTotaleRitenute().trim());
		
		if (type.getTotali().getQuintoCedibile() != null && !type.getTotali().getQuintoCedibile().trim().equals("")) {
			tot.setQuintoCedibile(type.getTotali().getQuintoCedibile().trim());
			tot.setQuintoCedibileNumber(convertMoneyStringToBigDecimal(tot.getQuintoCedibile()));
		}

		cedolino.setTotali(tot);

		/* Importi progressivi */

		Progressivi progressivi = new Progressivi();
		if(type.getImportiProgressivi()!=null){
			if (type.getImportiProgressivi().getAliquotaMassima() != null && !type.getImportiProgressivi().getAliquotaMassima().trim().equals("")) {
				progressivi.setAliquotaMax(type.getImportiProgressivi().getAliquotaMassima().trim());
			}
			
			if (type.getImportiProgressivi().getAliquotaMedia() != null && !type.getImportiProgressivi().getAliquotaMedia().trim().equals("")) {
					progressivi.setAliquotaMed(type.getImportiProgressivi().getAliquotaMedia().trim());
			}
			
			if (type.getImportiProgressivi().getImponibileAC() != null && !type.getImportiProgressivi().getImponibileAC().trim().equals("")) {
				progressivi.setImponibileAC(type.getImportiProgressivi().getImponibileAC().trim());
			}
			if (type.getImportiProgressivi().getImponibileAP() != null && !type.getImportiProgressivi().getImponibileAP().trim().equals("")) {
				progressivi.setImponibileAP(type.getImportiProgressivi().getImponibileAP().trim());
			}
			if (type.getImportiProgressivi().getIRPEFAC() != null && !type.getImportiProgressivi().getIRPEFAC().trim().equals("")) {
				progressivi.setIrpefAC(type.getImportiProgressivi().getIRPEFAC().trim());
			}
			if (type.getImportiProgressivi().getIRPEFAP() != null && !type.getImportiProgressivi().getIRPEFAP().trim().equals("")) {
				progressivi.setIrpefAP(type.getImportiProgressivi().getIRPEFAP().trim());
			}
			
			LOGGER.debug("--->>>>>>>>>>>"+type.getImportiProgressivi().getMassimaleContrib()+"-----"+type.getImportiProgressivi().getImponibileContrib());
			
			if (type.getImportiProgressivi().getMassimaleContrib() != null && !type.getImportiProgressivi().getMassimaleContrib().trim().equals("")&& !type.getImportiProgressivi().getMassimaleContrib().trim().equals("*")) {
				progressivi.setMassimaleContrib(type.getImportiProgressivi().getMassimaleContrib().trim());
			}
			
			if (type.getImportiProgressivi().getImponibileContrib() != null && !type.getImportiProgressivi().getImponibileContrib().trim().equals("")&& !type.getImportiProgressivi().getImponibileContrib().trim().equals("*")) {
				progressivi.setImponibileContrib(type.getImportiProgressivi().getImponibileContrib().trim());
			}
		}
		
		if(type.getImportiProgressiviME()!=null){

			progressivi.setImponibileME(type.getImportiProgressiviME().getImponibileME().trim());
			progressivi.setIrpefME(type.getImportiProgressiviME().getIRPEFME().trim());
			progressivi.setAliquotaME(type.getImportiProgressiviME().getAliquotaME().trim());
			
		}
		
		cedolino.setProgressivi(progressivi);
    	
		
		/* Messaggi */
		List<Messaggio> messaggi = type.getMessaggi();
		if(!messaggi.isEmpty()){
			Iterator<Messaggio> messaggiIterator = messaggi.iterator();
			Messaggi messaggiType = new Messaggi();
			while (messaggiIterator.hasNext()){
				messaggiType.getMessaggio().add(messaggiIterator.next().getDettaglio().replaceAll("[\\000-\\031-\\u001C-\\u001D]*", ""));
			}
			cedolino.setMessaggi(messaggiType);			
		}

    	/* Ulteriori informazioni */

		List<COV> listaCov =  type.getCov();
		if (!listaCov.isEmpty()) {
			Iterator<COV> covIterator = listaCov.iterator();
			while (covIterator.hasNext()) {
				ContrattiVigenti contrattiVigenti = new ContrattiVigenti();
				COV cov = (COV) covIterator.next();
					
				ContrattiVigentiType cvt = new ContrattiVigentiType(cov.getDettaglioCOV());
				
				if (!cov.getDettaglioCOV().equals("I contratti vigenti al mese si trovano sulla pagina delle note.")){
					contrattiVigenti.setTipologia(cvt.getTipologia());
					contrattiVigenti.setDataDecorrenza(cvt.getDataDecorrenza());
					contrattiVigenti.setDataScadenza(cvt.getDataScadenza());
					contrattiVigenti.setOreSuCattedra(cvt.getOreSuCattedra());
					if (cvt.getCodSIDI() != null && !cvt.getCodSIDI().trim().equals("")) {
						contrattiVigenti.setCodSIDI(cvt.getCodSIDI());
					}
					cedolino.getContrattiVigenti().add(contrattiVigenti);
				}
			}
		}
		
		List<RIF> listaRif = type.getRif();
		if (!listaRif.isEmpty()) {
			Iterator<RIF> rifIterator = listaRif.iterator();
			while (rifIterator.hasNext()) {
				RIF rif = rifIterator.next();
				if(rif.getDettaglioRIF().trim().endsWith("Dati accantonamento TFR")){
					Tfr tfr = new Tfr();
					TFRType tfrType = new TFRType(rif.getDettaglioRIF());
					tfr.setContrFondoGaranzia(tfrType.getContrFondoGaranzia());
					tfr.setPrevComplementare(tfrType.getPrevComplementare());
					tfr.setValoreAccantonato(tfrType.getValoreAccantonato());
					cedolino.setTfr(tfr);
				}else{
					cedolino.setRifInformazioni(rif.getDettaglioRIF().trim());
				}
			}
		}

		
		int progCedInt = Integer.parseInt(bt.getProgressivoCedolino());
		int progFileInt = (Integer.parseInt(bt.getProgressivoTipologia())-1)*10000;
		
		if (i != progCedInt-progFileInt) {
			LOGGER.debug("progCedInt: "+progCedInt+" - progFileInt: "+progFileInt);
			LOGGER.warn(i + " Mismatch at "+ bt.getProgressivoCedolino() + " "+ type.getBarcode().getBarcode());

		}
		
		i++;
		
		OrigineDati origineDati = origineDatiMap.get(resource.getFilename());
		origineDati.setTotDoc(origineDati.getTotDoc().add(BigInteger.ONE));
		origineDati.setTotNetto(origineDati.getTotNetto().doubleValue() + tot.getTotaleNettoNumber().doubleValue());
		LOGGER.debug("Elaborazione origine dati: "+origineDati.getNomeFile());
				
    	return cedolino;
    	
	}
	
	private BigDecimal convertMoneyStringToBigDecimal(String moneyString) {
		String step1 = moneyString.replace(".", ""); 
		String step2 = step1.replace(",", ".");
		return new BigDecimal(step2);
		
	}

	public void setResource(Resource resource) {
		this.resource = resource;
	}

	public void setOrigineDatiMap(Map<String, OrigineDati> origineDatiMap) {
		this.origineDatiMap = origineDatiMap;
	}

}
