package it.gov.mef.noipa.postemissione.pe_depconconverterbatch.batch.cud;

import it.gov.mef.noipa.postemissione.parser.autogenerated.cud.cud.AccontiAP;
import it.gov.mef.noipa.postemissione.parser.autogenerated.cud.cud.AnagraficaType;
import it.gov.mef.noipa.postemissione.parser.autogenerated.cud.cud.ConiugeFamiliariCaricoType;
import it.gov.mef.noipa.postemissione.parser.autogenerated.cud.cud.CudType;
import it.gov.mef.noipa.postemissione.parser.autogenerated.cud.cud.CudType.CertificazioneLavoro;
import it.gov.mef.noipa.postemissione.parser.autogenerated.cud.cud.CudType.CertificazioneLavoro.DatiCertificazione;
import it.gov.mef.noipa.postemissione.parser.autogenerated.cud.cud.CudType.DatiFiscali;
import it.gov.mef.noipa.postemissione.parser.autogenerated.cud.cud.CudType.DatiFiscali.Acconti;
import it.gov.mef.noipa.postemissione.parser.autogenerated.cud.cud.CudType.DatiFiscali.AltriDati;
import it.gov.mef.noipa.postemissione.parser.autogenerated.cud.cud.CudType.DatiFiscali.DetrazioniCrediti;
import it.gov.mef.noipa.postemissione.parser.autogenerated.cud.cud.CudType.DatiFiscali.DetrazioniCrediti.BonusIRPEF;
import it.gov.mef.noipa.postemissione.parser.autogenerated.cud.cud.CudType.DatiFiscali.OneriDeducibili;
import it.gov.mef.noipa.postemissione.parser.autogenerated.cud.cud.CudType.DatiFiscali.PrevidenzaComplementare;
import it.gov.mef.noipa.postemissione.parser.autogenerated.cud.cud.CudType.DatiFiscali.Redditi;
import it.gov.mef.noipa.postemissione.parser.autogenerated.cud.cud.CudType.DatiFiscali.Ritenute;
import it.gov.mef.noipa.postemissione.parser.autogenerated.cud.cud.CudType.DatiGenerali;
import it.gov.mef.noipa.postemissione.parser.autogenerated.cud.cud.CudType.DatiGenerali.AnagraficaDipendente;
import it.gov.mef.noipa.postemissione.parser.autogenerated.cud.cud.CudType.DatiGenerali.DatoreLavoro;
import it.gov.mef.noipa.postemissione.parser.autogenerated.cud.cud.CudType.DatiPrevidenziali;
import it.gov.mef.noipa.postemissione.parser.autogenerated.cud.cud.CudType.DatiPrevidenziali.INPDAP;
import it.gov.mef.noipa.postemissione.parser.autogenerated.cud.cud.CudType.DatiPrevidenziali.INPS;
import it.gov.mef.noipa.postemissione.parser.autogenerated.cud.cud.CudType.DettaglioConiugeFamiliari;
import it.gov.mef.noipa.postemissione.parser.autogenerated.cud.cud.CudType.Firma;
import it.gov.mef.noipa.postemissione.parser.autogenerated.cud.cud.CudType.SezDestinazione;
import it.gov.mef.noipa.postemissione.parser.autogenerated.cud.cud.CudType.TassazioneSeparata;
import it.gov.mef.noipa.postemissione.parser.autogenerated.cud.cud.CudType.TassazioneSeparata.CompensiAnniPrecedenti;
import it.gov.mef.noipa.postemissione.parser.autogenerated.cud.cud.CudType.TassazioneSeparata.TFR;
import it.gov.mef.noipa.postemissione.parser.autogenerated.cud.cud.CudType.Testata;
import it.gov.mef.noipa.postemissione.parser.autogenerated.cud.cud.CudType.Testata.EnteApp;
import it.gov.mef.noipa.postemissione.parser.autogenerated.cud.cud.CudType.TestoAnnotazioni;
import it.gov.mef.noipa.postemissione.parser.autogenerated.cud.cud.DenunciaUniemens;
import it.gov.mef.noipa.postemissione.parser.autogenerated.cud.cud.DomicilioFiscale;
import it.gov.mef.noipa.postemissione.parser.autogenerated.cud.cud.LINGUATYPE;
import it.gov.mef.noipa.postemissione.parser.autogenerated.cud.cud.MatricolaType;
import it.gov.mef.noipa.postemissione.parser.autogenerated.cud.cud.SESSOTYPE;
import it.gov.mef.noipa.postemissione.parser.autogenerated.cud.cud.TotaliINPDAP;
import it.gov.mef.noipa.postemissione.parser.autogenerated.cud.depcudcon.Annotazioni;
import it.gov.mef.noipa.postemissione.parser.autogenerated.cud.depcudcon.ConiugeFamiliariCarico;
import it.gov.mef.noipa.postemissione.parser.autogenerated.cud.depcudcon.CudDepcon;
import it.gov.mef.noipa.postemissione.parser.autogenerated.cud.depcudcon.TerzaPagina;
import it.gov.mef.noipa.postemissione.parser.autogenerated.cud.depcudcon.types.AltriDatiType;
import it.gov.mef.noipa.postemissione.parser.autogenerated.cud.depcudcon.types.AnagraficaDipendente1Type;
import it.gov.mef.noipa.postemissione.parser.autogenerated.cud.depcudcon.types.AnagraficaDipendente2Type;
import it.gov.mef.noipa.postemissione.parser.autogenerated.cud.depcudcon.types.AnagraficaDipendente3Type;
import it.gov.mef.noipa.postemissione.parser.autogenerated.cud.depcudcon.types.DG2Type;
import it.gov.mef.noipa.postemissione.parser.autogenerated.cud.depcudcon.types.DP3Type;
import it.gov.mef.noipa.postemissione.parser.autogenerated.cud.depcudcon.types.DP4Type;
import it.gov.mef.noipa.postemissione.parser.autogenerated.cud.depcudcon.types.DP5Type;
import it.gov.mef.noipa.postemissione.parser.autogenerated.cud.depcudcon.types.DatiGeneraliType;
import it.gov.mef.noipa.postemissione.parser.autogenerated.cud.depcudcon.types.DatiPrevAssType;
import it.gov.mef.noipa.postemissione.parser.autogenerated.cud.depcudcon.types.FamiliariCaricoType;
import it.gov.mef.noipa.postemissione.parser.autogenerated.cud.depcudcon.types.TS2Type;
import it.gov.mef.noipa.postemissione.parser.autogenerated.cud.depcudcon.types.TS3Type;
import it.gov.mef.noipa.postemissione.parser.autogenerated.cud.depcudcon.types.TerzaPaginaDatiAnagType;
import it.gov.mef.noipa.postemissione.parser.autogenerated.cud.depcudcon.types.TerzaPaginaDatiResidType;
import it.gov.mef.noipa.postemissione.pe_depconconverterbatch.batch.Util;
import it.gov.mef.noipa.postemissione.pe_depconconverterbatch.bean.OrigineDati;

import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Iterator;
import java.util.Map;

import org.apache.log4j.Logger;
import org.springframework.batch.item.ItemProcessor;
import org.springframework.core.io.Resource;

public class Processor implements ItemProcessor<CudDepcon, CudType> {

	private static final Logger LOGGER = Logger.getLogger(Processor.class);
	
	private Resource resource;
	private Map<String, OrigineDati> origineDatiMap;
	
	public int i = 1;
	
	public CudType process(CudDepcon cudDepcon) throws Exception {
		
		AnagraficaDipendente1Type ag1 = new AnagraficaDipendente1Type(cudDepcon.getAnagraficaDipendente().getAnagraficaDipendente1());
		AnagraficaDipendente2Type ag2 = new AnagraficaDipendente2Type(cudDepcon.getAnagraficaDipendente().getAnagraficaDipendente2());
		AnagraficaDipendente3Type ag3 = new AnagraficaDipendente3Type(cudDepcon.getAnagraficaDipendente().getAnagraficaDipendente3());
		
		LOGGER.info("Process "+ ag1.getCodiceFiscale());
		long threadId = Thread.currentThread().getId();
		LOGGER.info("Thread "+ threadId +" #"+i);
		CudType cud = new CudType();
		
		String codiceFiscale = ag1.getCodiceFiscale();
		
		String cognome = Util.clearField(ag1.getCognome());
		String nome = Util.clearField(ag1.getNome());
			
		// TESTATA
		
		cud.setTestata(new Testata());
		cud.getTestata().setIDCedolino("0");

		LINGUATYPE linguatype = LINGUATYPE.I;
		
		DP4Type dp4 = new DP4Type(cudDepcon.getInpdap().getDP4());
		DP5Type dp5 = new DP5Type(cudDepcon.getInpdap().getDP5());
		
		cud.getTestata().setLingua(linguatype);
		cud.getTestata().setRata("201" + cudDepcon.getBarcode().getBarcode().substring(5, 6) + "00");
		cud.getTestata().setDescrRata(dp4.getAnnoRiferimento());
		cud.getTestata().setBarcode(cudDepcon.getBarcode().getBarcode());
		
		
    	/* Anagrafica */
    	

		DatiGeneraliType dgt = new DatiGeneraliType (cudDepcon.getDatiGenerali().getDettaglio());
		MatricolaType mt = new MatricolaType();
		mt.setIscrizione(dgt.getIscrizione());
		
		AnagraficaType at = new AnagraficaType();
		
		at.setCodFiscaleAmministrato(codiceFiscale);
		at.setCognome(cognome);
		at.setNome(nome);
		at.setDataNascita(ag2.getDataNascita());
		at.setMatricola(mt);
		at.setDomicilioFiscale(ag3.getDomicilioFiscale11AAComune());
		cud.getTestata().setAnagrafica(at);
    	
    	/*Ente Appartenenza*/
    	
		EnteApp ea = new EnteApp();

		DG2Type dg2 = new DG2Type(cudDepcon.getDatoreLavoro().getDG2Type());
		
		ea.setCodFiscEnte(dg2.getCodiceFiscale());
		ea.setCodEnte(dgt.getDpt());
		ea.setDesEnte(dg2.getDescrizioneEnte());
		ea.setCodUffResp(dgt.getDpt());
		ea.setDesUffResp(dgt.getDpt());
		ea.setCodSedeUffServizio(dgt.getUfficioServizio());
		ea.setDesSedeUffServizio(dgt.getUfficioServizio());
		cud.getTestata().setEnteApp(ea);
		
		// --- DATI GENERALI --- 
		
		DatiGenerali dg = new DatiGenerali();

			dg.setDpt(dgt.getDpt());
			dg.setR1(dgt.getR1());
			dg.setR2(dgt.getR2());
			dg.setUfficioServizio(dgt.getUfficioServizio());
		
		mt.setIscrizione(dgt.getIscrizione());
		dg.setSedeMAE(dgt.getSedeMAE());
		dg.setDesMAE(dgt.getDescrMAE());
		dg.setBarcode(cudDepcon.getBarcode().getBarcode());
		
		dg.setIscrizione(mt);
		cud.setDatiGenerali(dg);
		
		// --- DATI GENERALI --- ANAGRAFICA DIPENDENTE
		
		AnagraficaDipendente ad = new AnagraficaDipendente();
		DomicilioFiscale dfAA = new DomicilioFiscale ();
		DomicilioFiscale dfAP = new DomicilioFiscale ();
		
		ad.setSesso(SESSOTYPE.fromValue(ag2.getSesso()));
		ad.setComuneNascita(ag2.getComuneNascita());
		ad.setSiglaProvNascita(ag2.getSiglaProvinciaNascita());
		
		if (ag2.getEventiEccezionali() != null && !ag2.getEventiEccezionali().trim().equals("")){
			ad.setEventiEccezionali(ag2.getEventiEccezionali());
			}
		
		dfAP.setCodComune(ag3.getDomicilioFiscale11AACodiceComune());
		dfAP.setComune(ag3.getDomicilioFiscale11AAComune());
		dfAP.setSiglaProv(ag3.getDomicilioFiscale11AASiglaProvincia());
		
		dfAA.setCodComune(ag3.getDomicilioFiscale11AACodiceComune1());
		dfAA.setComune(ag3.getDomicilioFiscale11AAComune1());
		dfAA.setSiglaProv(ag3.getDomicilioFiscale11AASiglaProvincia1());
		
		ad.setAnagrafica(at);
		ad.setDomFiscAP(dfAP);
		ad.setDomFiscAA(dfAA);
		
		dg.setAnagraficaDipendente(ad);
		cud.setDatiGenerali(dg);
		
		// --- DATI GENERALI --- DATORE LAVORO
		
		DatoreLavoro dl = new DatoreLavoro();
		
		dl.setDesEnte(dg2.getDescrizioneEnte());
		dl.setCodFiscEnte(dg2.getCodiceFiscale());
		dl.setIndirizzoEnte(cudDepcon.getDatoreLavoro().getIndirizzoEnte());
		
		dg.setDatoreLavoro(dl);
		cud.setDatiGenerali(dg);
		
		// --- DATI FISCALI --- REDDITI
		
		DatiFiscali df = new DatiFiscali();
		Redditi dfr = new Redditi ();
		
		if (cudDepcon.getRedditi().getRedditiLavoroDipendente() != null && !cudDepcon.getRedditi().getRedditiLavoroDipendente().trim().equals("")){
			dfr.setRedditiLavDipendente(cudDepcon.getRedditi().getRedditiLavoroDipendente());
			}
		
		if (cudDepcon.getRedditi().getFlagDeterminatoIndeterminato() != null && !cudDepcon.getRedditi().getFlagDeterminatoIndeterminato().trim().equals("")){
			dfr.setFlagDeterIndeter(cudDepcon.getRedditi().getFlagDeterminatoIndeterminato());
			}
		
		if (cudDepcon.getRedditi().getAltriRedditi() != null && !cudDepcon.getRedditi().getAltriRedditi().trim().equals("")){
			dfr.setAltriRedditi(cudDepcon.getRedditi().getAltriRedditi());
			}
		
		if (cudDepcon.getRedditi().getNumGiorniDetrazioniLavDipendente() != null && !cudDepcon.getRedditi().getNumGiorniDetrazioniLavDipendente().trim().equals("")){
			dfr.setGiorniDetrLavDip(cudDepcon.getRedditi().getNumGiorniDetrazioniLavDipendente());
			}
		
		df.setRedditi(dfr);
		cud.setDatiFiscali(df);
		
		// --- DATI FISCALI --- RITENUTE
		
		Ritenute rit = new Ritenute ();
		
		rit.setRitenIRPEFSopese(cudDepcon.getRitenute().getRitenuteIRPEFSopese());
		rit.setAddRegIRPEF(cudDepcon.getRitenute().getAddizionaliRegionaliIRPEF());
		rit.setAddComIrpefAccontoAP(cudDepcon.getRitenute().getAddizionaliComunaliIrpefAcconto20Aa());
		rit.setAddComIrpefSaldoAP(cudDepcon.getRitenute().getAddizionaliComunaliIrpefSaldo20Aa());
		rit.setAddComIrpefAccontoAA(cudDepcon.getRitenute().getAddizionaliComunaliIrpefAcconto20Aa1());
		
		df.setRitenute(rit);
		cud.setDatiFiscali(df);
		
		// --- DATI FISCALI --- ACCONTI
		
		Acconti ac = new Acconti();
		AccontiAP accAPD= new AccontiAP();
		AccontiAP accAPc= new AccontiAP();
		
		accAPD.setPrimoAccIrpefTratt(cudDepcon.getAccontoDichiarante().getPrimoAccontoIRPEFTrat());
		accAPD.setSecondoAccIrpef(cudDepcon.getAccontoDichiarante().getSecondoAccontoIRPEF());
		accAPD.setAccIRPEFSospesi(cudDepcon.getAccontoDichiarante().getAccontoIrpefSospesi());
		accAPD.setAccAddComunaleIrpef(cudDepcon.getAccontoDichiarante().getAccontoAddComunaleIrpef());
		accAPD.setAccIRPEFSospesi(cudDepcon.getAccontoDichiarante().getAccontoIrpefSospesi());
		accAPD.setPrimaRataAccCedSecca(cudDepcon.getAccontoDichiarante().getPrimaRataAccCedSecca());
		accAPD.setSecondaRataAccCedSecca(cudDepcon.getAccontoDichiarante().getSecondaRataAccCedSecca());
		
		accAPc.setPrimoAccIrpefTratt(cudDepcon.getAccontoDichiarante().getPrimoAccontoIRPEFTrat());
		accAPc.setSecondoAccIrpef(cudDepcon.getAccontoDichiarante().getSecondoAccontoIRPEF());
		accAPc.setAccIRPEFSospesi(cudDepcon.getAccontoDichiarante().getAccontoIrpefSospesi());
		accAPc.setAccAddComunaleIrpef(cudDepcon.getAccontoDichiarante().getAccontoAddComunaleIrpef());
		accAPc.setAccIRPEFSospesi(cudDepcon.getAccontoDichiarante().getAccontoIrpefSospesi());
		accAPc.setPrimaRataAccCedSecca(cudDepcon.getAccontoDichiarante().getPrimaRataAccCedSecca());
		accAPc.setSecondaRataAccCedSecca(cudDepcon.getAccontoDichiarante().getSecondaRataAccCedSecca());
		
		ac.setAccontiAPDichiarante(accAPD);
		ac.setAccontiAPConiuge(accAPc);
		df.setAcconti(ac);
		cud.setDatiFiscali(df);
		
		// --- DATI FISCALI --- DETRAZIONI E CREDITI
		
		DetrazioniCrediti dc= new DetrazioniCrediti();
		BonusIRPEF bi = new BonusIRPEF();

		dc.setImpostaLorda(cudDepcon.getDetrazioniCrediti().getImpostaLorda());
		dc.setDetrCarichiFamiglia(cudDepcon.getDetrazioniCrediti().getDetrCarichiFamiglia());
		dc.setDetrFamNumerose(cudDepcon.getDetrazioniCrediti().getDetrFamNumerose());
		dc.setCredNonricFamNumerose(cudDepcon.getDetrazioniCrediti().getCredNonRicFamNumerose());
		dc.setDetrLavDip(cudDepcon.getDetrazioniCrediti().getDetrLavDip());
		dc.setDetrCanoniLocazione(cudDepcon.getDetrazioniCrediti().getDetrCanoniLocazione());
		dc.setCreditoNonricCanoniLoc(cudDepcon.getDetrazioniCrediti().getCreditoNonRicCanoniLoc());
		dc.setTotDetrazioni(cudDepcon.getDetrazioniCrediti().getTotaleDetrazioni());
		bi.setCodBonus(cudDepcon.getDetrazioniCrediti().getCodiceBonus());
		bi.setBonusErogato(cudDepcon.getDetrazioniCrediti().getBonusErogato());
		bi.setBonusNonErogato(cudDepcon.getDetrazioniCrediti().getBonusNonErogato());
		dc.setBonusIRPEF(bi);
		df.setDetrazioniCrediti(dc);
		cud.setDatiFiscali(df);
		
		// --- DATI FISCALI --- PREVIDENZA COMPLEMENTARE
		
		PrevidenzaComplementare pc = new PrevidenzaComplementare();
		pc.setPrevidenzaComp(cudDepcon.getPrevidenzaComplementare().getPrevidenzaComp());
		pc.setContribPrevidenzaComp(cudDepcon.getPrevidenzaComplementare().getContribPrevidenzaComp());
		pc.setContribPrevCompNonDedotti(cudDepcon.getPrevidenzaComplementare().getContribPrevCompNonDedotti());
		pc.setTFRDestinatoFondo(cudDepcon.getPrevidenzaComplementare().getTFRDesinatoFondo());
		
		df.setPrevidenzaComplementare(pc);	
		cud.setDatiFiscali(df);
		
		// --- DATI FISCALI --- ONERI DEDUCIBILI
		
		OneriDeducibili od = new OneriDeducibili();
		od.setTotOneriEsclusiRed(cudDepcon.getOneriDeducibili().getTotaleOneriEsclusiRedditi());
		od.setContribEntiFiniAssistenziali(cudDepcon.getOneriDeducibili().getContribEntiFiniAssistenziali());
		
		df.setOneriDeducibili(od);
		cud.setDatiFiscali(df);
		
		// --- DATI FISCALI --- ALTRI DATI
		
		AltriDati adf = new AltriDati();
		AltriDatiType adft = new AltriDatiType (cudDepcon.getAltriDati().getDettaglio());
		
		adf.setIRPEFDaTrattenere(adft.getIRPEFdaTrattenere());
		adf.setIRPEFDaVersare(adft.getIRPEFdaVersare());
		adf.setMaggioreRitenuta(cudDepcon.getAltriDati().getMaggioreRitenuta());
		adf.setCasiParticolari(cudDepcon.getAltriDati().getCasiParticolari());
		
		df.setAltriDati(adf);
		cud.setDatiFiscali(df);
		
		// --- TASSAZIONE SEPARATA --- COMPENSI ANNI PRECEDENTI
		
		TassazioneSeparata ts = new TassazioneSeparata();
		CompensiAnniPrecedenti compAnnPrec = new CompensiAnniPrecedenti ();
		compAnnPrec.setTotCompArretrati(cudDepcon.getCompensiAnniPrecedenti().getTotaleCompArretrati());
		compAnnPrec.setTotRitenuteOperateSospese(cudDepcon.getCompensiAnniPrecedenti().getTotaleRitenuteOperateSospese());
		compAnnPrec.setTotRitenuteOperate(cudDepcon.getCompensiAnniPrecedenti().getTotaleRitenuteOperate());
		
		ts.setCompensiAnniPrecedenti(compAnnPrec);
		cud.setTassazioneSeparata(ts);
		
		TFR tfr = new TFR();
		TS2Type ts2 = new TS2Type(cudDepcon.getTrattamentoFineRapporto().getTS2());
		TS3Type ts3 = new TS3Type(cudDepcon.getTrattamentoFineRapporto().getTS3());
		
		tfr.setIndAccErogate(ts2.getIndAccErogateAnno());
		tfr.setAccontiAP(ts2.getAccontiAP());
		tfr.setDetrazione(ts2.getDetrazione());
		tfr.setRitenutaOperata(ts3.getRitenutaOperataAnno());
		tfr.setFiller1(ts3.getFiller1());
		tfr.setFiller2(ts3.getFiller2());
		tfr.setRitenuteOperateAP(ts3.getRitenuteOperateAP());
		
		ts.setTFR(tfr);
		cud.setTassazioneSeparata(ts);
		
		// --- DATI RELATIVI AL CONIUGE E AI FAMILIARI A CARICO ---
		
			Iterator<ConiugeFamiliariCarico> annFamiliari = cudDepcon.getConiugeFamiliariCarico().iterator();
			DettaglioConiugeFamiliari DCF = new DettaglioConiugeFamiliari();
			
			
			while(annFamiliari.hasNext()) {
				
				ConiugeFamiliariCarico CFC0 = (ConiugeFamiliariCarico) annFamiliari.next();
				
				FamiliariCaricoType FCT = new FamiliariCaricoType (CFC0.getDettaglio());
				
				ConiugeFamiliariCaricoType CFCT = new ConiugeFamiliariCaricoType();
				CFCT.setFiglio(FCT.getFiglio());
				CFCT.setAltroFamiliare(FCT.getAltroFamiliare());
				CFCT.setFiglioDisabile(FCT.getFiglioDisabile());
				CFCT.setCodFiscale(FCT.getCodiceFiscale());
				CFCT.setNumMesiCarico(FCT.getNumMesiCarico());
				CFCT.setMin3Anni(FCT.getMinTreAnni());
				CFCT.setPercDetrazioneSpettante(FCT.getPercDetrazione());
				CFCT.setDetrazioneTotale(FCT.getDetrazioneTotale());
				
				DCF.getConiugeFamiliari().add(CFCT);
				
			 }
			DCF.setDetrFamNumerose(cudDepcon.getConiugeFamiliariCaricoDCA().getDettaglio());
			cud.setDettaglioConiugeFamiliari(DCF);
		
		// --- DATI PREVIDENZIALI ---
		DatiPrevidenziali dp = new DatiPrevidenziali();
		DatiPrevAssType dpt = new DatiPrevAssType(cudDepcon.getDatiPrevidenzialiAssistenziali().getDettaglio());
		dp.setMatricolaAzienda(dpt.getMatricolaAzienda());
		dp.setDesINPS(dpt.getDesINPS());
		dp.setAltro(dpt.getAltro());
		dp.setImponibilePrev(dpt.getImponibilePrev());
		dp.setContribCaricoLavTrattenuti(dpt.getContributoLavTrattenuti());
		
		cud.setDatiPrevidenziali(dp);
		
		// --- DATI PREVIDENZIALI --- INPS ---
		
		INPS inps = new INPS ();
		DP3Type dp3 = new DP3Type(cudDepcon.getInps().getDP3());
		DenunciaUniemens dus = new DenunciaUniemens();
		DenunciaUniemens duc = new DenunciaUniemens ();
		dus.setMesiTutti(cudDepcon.getInps().getMesiDenunciaTutti());
		dus.setMesiEsclusi(cudDepcon.getInps().getMesiDenTuttiEscl());
		duc.setMesiTutti(dp3.getMesiDenunciaTuttiDP3());
		duc.setMesiEsclusi(dp3.getMesiDenTuttiEsclDP3());
		
		inps.setUniemensSubordinati(dus);
		inps.setUniemensCollaboratori(duc);
		
		inps.setCompCorrisposti(dp3.getCompCorrisposti());
		inps.setCompDovuti(dp3.getCompDovuti());
		inps.setContribTrattenuti(dp3.getContribTrattenut());
		inps.setContribVersati(dp3.getContribVersati());
		
		dp.setINPS(inps);
		
		cud.setDatiPrevidenziali(dp);
		
		// --- DATI PREVIDENZIALI --- INPDAP ---
		
		INPDAP inpdap = new INPDAP ();
		inpdap.setCFAmministrazione(dp4.getCodiceFiscaleAmministrazione());
		inpdap.setCodIdSPT(dp4.getCodiceIdentSPT());
		inpdap.setPens(dp4.getPens());
		inpdap.setPrev(dp4.getPrev());
		inpdap.setCred(dp4.getCred());
		inpdap.setEnpdep(dp4.getEnpdep());
		inpdap.setAnnoRif(dp4.getAnnoRiferimento());
		
		TotaliINPDAP pens = new TotaliINPDAP ();
		TotaliINPDAP TFS = new TotaliINPDAP ();
		TotaliINPDAP TFR = new TotaliINPDAP ();
		TotaliINPDAP gestioneCredito = new TotaliINPDAP ();
		TotaliINPDAP ENPDEP = new TotaliINPDAP ();
		
		pens.setTotaleImponibile(dp4.getTotImpPensionistico());
		pens.setTotaleContributi(dp4.getTotContribPensionistici());
		
		TFS.setTotaleImponibile(dp4.getTotImpTFS());
		TFS.setTotaleContributi(dp5.getTotContribTFS());
		
		TFR.setTotaleImponibile(dp5.getTotImpTFR());
		TFR.setTotaleContributi(dp5.getTotContribTFR());
		
		gestioneCredito.setTotaleImponibile(dp5.getTotImpGestCredito());
		gestioneCredito.setTotaleContributi(dp5.getTotContribGestCredito());
		
		ENPDEP.setTotaleImponibile(dp5.getTotImpENPDEP());
		ENPDEP.setTotaleContributi(dp5.getTotContribEnpdep());
		
		inpdap.setTotaliPensionistici(pens);
		inpdap.setTotaliTFS(TFS);
		inpdap.setTotaliTFR(TFR);
		inpdap.setTotGestioneCredito(gestioneCredito);
		inpdap.setTotaliENPDEP(ENPDEP);
		
		dp.setINPDAP(inpdap);
		cud.setDatiPrevidenziali(dp);
		
		// --- CERTIFICAZIONE LAVORO --- 
		
		CertificazioneLavoro cl = new CertificazioneLavoro();
		cl.setTipologiaReddituale(cudDepcon.getCertificazioneLavAutonomo().getTipologiaReddituale());
		
		cud.setCertificazioneLavoro(cl);
		
		// --- CERTIFICAZIONE LAVORO --- DATI CERTIFICAZIONE ---
		
		DatiCertificazione dcl = new DatiCertificazione();
		dcl.setAmmontareLordo(cudDepcon.getCertificazioneLavAutonomo().getAmmontareLordo());
		dcl.setImponibile(cudDepcon.getCertificazioneLavAutonomo().getImponibile());
		dcl.setRitenuteTitAcconto(cudDepcon.getCertificazioneLavAutonomo().getRitenuteTitAcconto());
		
		cl.setDatiCertificazione(dcl);
		cud.setCertificazioneLavoro(cl);
		
		// --- ANNOTAZIONI ---
		
		Annotazioni an = new Annotazioni();
		Iterator<Annotazioni> annIterator = cudDepcon.getAnnotazioni().iterator();
		String testoAnnotazioni = "";
		
		while(annIterator.hasNext()) {
		Annotazioni an0 = (Annotazioni) annIterator.next();
		testoAnnotazioni= testoAnnotazioni + " " + an0.getDettaglio();
		an.setDettaglio(testoAnnotazioni);
		 }
		
		TestoAnnotazioni TA = new TestoAnnotazioni();
		TA.setAnnotazione(testoAnnotazioni);
		cud.setTestoAnnotazioni(TA);
		
		// --- FIRMA ---
		
		Firma fir = new Firma ();
		fir.setData(cudDepcon.getFirma().getData());
		fir.setFirmaDatoreLavoro(cudDepcon.getFirma().getFirmaDatoreLavoro());
		
		cud.setFirma(fir);
		
		SezDestinazione SD = new SezDestinazione();
		AnagraficaType atd = new AnagraficaType();
		
		Iterator<TerzaPagina> annIterator2 = cudDepcon.getTerzaPagina().iterator();
		
		while(annIterator2.hasNext()) {
			TerzaPagina TP0 = (TerzaPagina) annIterator2.next();
			
			SD.setCodFiscaleEnte(TP0.getCodiceFiscaleEnte());
			atd.setCodFiscaleAmministrato(TP0.getCodiceFiscale());
			
			TerzaPaginaDatiAnagType tpDatiAnag = new TerzaPaginaDatiAnagType(TP0.getDatiAnag());
			atd.setCognome(Util.clearField(tpDatiAnag.getCognome()));
			atd.setNome(Util.clearField(tpDatiAnag.getNome()));
			SD.setSesso(SESSOTYPE.fromValue(tpDatiAnag.getSesso()));

			TerzaPaginaDatiResidType tpDatiResid = new TerzaPaginaDatiResidType(TP0.getDatiResidenza());
			atd.setDataNascita(tpDatiResid.getData());
			SD.setComuneResidenza(tpDatiResid.getComuneResidenza());
			SD.setProvinciaResidenza(tpDatiResid.getProvinciaResidenza());
		}
		
		SD.setAnagrafica(atd);
		cud.setSezDestinazione(SD);
		
		i++;
		
		OrigineDati origineDati = origineDatiMap.get(resource.getFilename());
		origineDati.setTotDoc(origineDati.getTotDoc().add(BigInteger.ONE));
		origineDati.setTotNetto(new Double(0));
		LOGGER.info("Elaborazione origine dati per in: "+origineDati+" - out: "+origineDati.getNomeFile());
		
		Util.clearSpaceAndUpperCase(cud);
		
		return cud;
    	
	}
	
	@SuppressWarnings("unused")
	private BigDecimal convertMoneyStringToBigDecimal(String moneyString) {
		String step1 = moneyString.replace(".", ""); 
		String step2 = step1.replace(",", ".");
		return new BigDecimal(step2);
		
	}

	public void setResource(Resource resource) {
		this.resource = resource;
	}

	public void setOrigineDatiMap(Map<String, OrigineDati> origineDatiMap) {
		this.origineDatiMap = origineDatiMap;
	}
	
}
