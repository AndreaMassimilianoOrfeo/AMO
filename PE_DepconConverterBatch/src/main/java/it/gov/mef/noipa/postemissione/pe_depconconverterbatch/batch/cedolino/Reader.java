package it.gov.mef.noipa.postemissione.pe_depconconverterbatch.batch.cedolino;

import it.assist.jrecordbind.CedolinoReader;
import it.assist.jrecordbind.Unmarshaller;
import it.gov.mef.noipa.postemissione.parser.autogenerated.cedolino.depcon.CedolinoDepcon;

import java.io.FileInputStream;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.util.Date;
import java.util.Iterator;

import org.apache.log4j.Logger;
import org.springframework.batch.item.ExecutionContext;
import org.springframework.batch.item.ItemStreamException;
import org.springframework.batch.item.file.ResourceAwareItemReaderItemStream;
import org.springframework.core.io.Resource;


public class Reader implements ResourceAwareItemReaderItemStream<CedolinoDepcon> {

	private static final Logger LOGGER = Logger.getLogger(Reader.class);
	
	private Resource resource;
	private Iterator<CedolinoDepcon> iter;
	private InputStreamReader isr;
	private FileInputStream fis;
	Date timeStart = new Date();
	
	
	public CedolinoDepcon read() throws Exception {

		if (iter == null){
			Date timeMarshall = new Date();
			Unmarshaller<CedolinoDepcon> unmarshaller;
			InputStream isXsd = Reader.class.getResourceAsStream("/cedolinodepcon/depcon.def.xsd");
			InputStreamReader isrXsd = new InputStreamReader(isXsd);
			
			unmarshaller = new Unmarshaller<CedolinoDepcon>(isrXsd, CedolinoReader.class.getName());
			fis = new FileInputStream(resource.getFile().getPath());
			isr = new InputStreamReader(fis, "ISO-8859-1");
			
			iter = unmarshaller.unmarshall(isr);
			
			isrXsd.close();
			isXsd.close();
			LOGGER.debug("Tempo unmarshall:" + (new Date().getTime() - timeMarshall.getTime() ));
		}
		
		if (iter.hasNext()){
			CedolinoDepcon result = iter.next();
			return result;
		}else {
			LOGGER.debug("Tempo totale Iterator:" + (new Date().getTime() - timeStart.getTime() ));
			isr.close();
			fis.close();
			return null;
		}
	}


	public void setResource(Resource arg0) {
		resource = arg0;
	}


	public void close() throws ItemStreamException {
		LOGGER.debug("close Reader");
	}


	public void open(ExecutionContext arg0) throws ItemStreamException {
		LOGGER.debug("open Reader");
	}


	public void update(ExecutionContext arg0) throws ItemStreamException {
		LOGGER.debug("update Reader");
	}


	public Iterator<CedolinoDepcon> getIter() {
		return iter;
	}


	public void setIter(Iterator<CedolinoDepcon> iter) {
		this.iter = iter;
	}

}
