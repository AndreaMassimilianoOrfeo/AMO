package it.gov.mef.noipa.postemissione.pe_depconconverterbatch.batch.cud;

import static java.nio.file.StandardCopyOption.REPLACE_EXISTING;
import it.gov.mef.noipa.postemissione.parser.autogenerated.cud.cud.Cud;
import it.gov.mef.noipa.postemissione.parser.autogenerated.cud.cud.CudType;
import it.gov.mef.noipa.postemissione.pe_depconconverterbatch.batch.CustomMultiResourcePartitioner;
import it.gov.mef.noipa.postemissione.pe_depconconverterbatch.bean.OrigineDati;
import it.gov.mef.noipa.postemissione.pe_depconconverterbatch.db.ServiceFacade;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.net.URL;
import java.nio.file.Files;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.List;
import java.util.Locale;
import java.util.Map;

import javax.xml.XMLConstants;
import javax.xml.bind.JAXBContext;
import javax.xml.bind.JAXBException;
import javax.xml.bind.Marshaller;
import javax.xml.datatype.DatatypeConfigurationException;
import javax.xml.datatype.DatatypeFactory;
import javax.xml.datatype.XMLGregorianCalendar;
import javax.xml.validation.Schema;
import javax.xml.validation.SchemaFactory;

import org.apache.log4j.Logger;
import org.springframework.batch.item.ItemWriter;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.core.io.Resource;
import org.xml.sax.SAXException;


public class Writer implements ItemWriter<CudType> {

	@Autowired
	private ServiceFacade serviceFacade;
	private Marshaller marshaller;
	private String outputFile;
	private Resource resource;
	private String moveDir;
	private Map<String, OrigineDati> origineDatiMap;
	private Logger logger = Logger.getLogger(Writer.class);
	
	private String validareXml;



	public void setValidareXml(String validareXml) {
		this.validareXml = validareXml;
	}

	public void write(List<? extends CudType> lista) throws Exception {

		Date time = new Date();
	    creaFileXml(lista);
		logger.info("Tempo creafileXML:" + (new Date().getTime() - time.getTime() ));

		time = new Date();
	    serviceFacade.updateStatoFile(origineDatiMap, resource);
	    
//	    logger.info("Delete del file: "+resource.getFile().toPath());
	    logger.info("mv del file: "+resource.getFile().toPath() + " to "+moveDir+"/"+resource.getFilename());	  

	    Files.move(resource.getFile().toPath() ,new File(moveDir+"/"+resource.getFilename()).toPath(), REPLACE_EXISTING);
	    
//	    Files.deleteIfExists(resource.getFile().toPath());

	    logger.info(" records processsed in "+(System.currentTimeMillis()- CustomMultiResourcePartitioner.startTime)+" milliseconds");
		logger.info("Tempo scrittura File:" + (new Date().getTime() - time.getTime() ));
	}

	private void creaFileXml(List<? extends CudType> lista) throws JAXBException, FileNotFoundException, DatatypeConfigurationException, IOException, SAXException {
		JAXBContext jc = JAXBContext.newInstance( "it.gov.mef.noipa.postemissione.parser.autogenerated.cud.cud" );
		marshaller = jc.createMarshaller();
	    OutputStream os = new FileOutputStream(outputFile);
	    Cud listCedol = new Cud();
	    
	    listCedol.setCodiceSistemaEmittente("SPT");
	    listCedol.setDataProduzione(getCurrentDate());
	    listCedol.getCud().addAll(lista);
	    
	    if(validareXml==null || validareXml.equalsIgnoreCase("s")){
	        try {
	            SchemaFactory sf = SchemaFactory.newInstance(XMLConstants.W3C_XML_SCHEMA_NS_URI); 
	            URL resourceFile = getClass().getResource("/cud/Cud.xsd");
		        Schema schema = sf.newSchema(resourceFile);
		        marshaller.setSchema(schema);
		     } catch (SAXException e) {
		    	 logger.error("Errore di validazione", e);
		    	 throw e;
		     }
	    }

	    marshaller.marshal(listCedol, os );
	    os.close();
	}
	
	private XMLGregorianCalendar getCurrentDate() throws DatatypeConfigurationException {
		GregorianCalendar gc = new GregorianCalendar(Locale.ITALY);
		gc.setTimeInMillis(System.currentTimeMillis());
		return DatatypeFactory.newInstance().newXMLGregorianCalendar(gc);

	}
	
	public void setOutputFile(String outputFile) {
		this.outputFile = outputFile;
	}

	public void setResource(Resource resource) {
		this.resource = resource;
	}

	public void setMoveDir(String moveDir) {
		this.moveDir = moveDir;
	}
	
	public void setOrigineDatiMap(Map<String, OrigineDati> origineDatiMap) {
		this.origineDatiMap = origineDatiMap;
	}

}
