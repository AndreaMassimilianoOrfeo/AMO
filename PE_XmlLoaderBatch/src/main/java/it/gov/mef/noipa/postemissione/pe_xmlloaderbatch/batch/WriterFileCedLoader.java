package it.gov.mef.noipa.postemissione.pe_xmlloaderbatch.batch;

import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.util.Locale;
import java.util.Map;

import org.apache.log4j.Logger;
import org.springframework.batch.item.ItemWriter;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.core.io.Resource;
import org.springframework.util.Assert;

import it.gov.mef.noipa.postemissione.pe_xmlloaderbatch.batch.bean.Constants;
import it.gov.mef.noipa.postemissione.pe_xmlloaderbatch.batch.bean.ConstantsScarto;
import it.gov.mef.noipa.postemissione.parser.autogenerated.cedolino.Cedolini;
import it.gov.mef.noipa.postemissione.parser.autogenerated.cedolino.CedolinoType;
import it.gov.mef.noipa.postemissione.parser.autogenerated.cud.Cud;
import it.gov.mef.noipa.postemissione.parser.autogenerated.cud.CudType;
import it.gov.mef.noipa.postemissione.pe_xmlloaderbatch.batch.bean.DetrazioneFamiliareDocument;
import it.gov.mef.noipa.postemissione.pe_xmlloaderbatch.batch.bean.PostEmissioneDocument;
import it.gov.mef.noipa.postemissione.pe_xmlloaderbatch.batch.servicefacade.ServiceFacadeJDBC;
import it.gov.mef.noipa.postemissione.pe_xmlloaderbatch.batch.servicefacade.ServiceFacadeJDBCCedLoader;
import it.gov.mef.noipa.postemissione.pe_xmlloaderbatch.batch.bean.NumerositaEnteDocument;

public class WriterFileCedLoader implements ItemWriter<Object> {

	private static final Logger LOG = Logger.getLogger(WriterFileCedLoader.class);

	private String nomeFile_origine;
	private Map<String, String> mappaTipoEmissioni;
	private int idPostemissione;
	private String filePDFDir;
	private boolean caricaArtefattiOracle;
	private String tipoPostemissione;
	private PostEmissioneDocument postEmissioneDocument;
	private Date dtProcesso;
	private int rata;
	private String codDpt;
	private String codDptXml;
	// variabile impostata ad 1 per adesso (naming convention non affidabile)
	private int numeroCiclo = 1;
	private String taskNameElabora = "ELABORA_FILE_TOTALE";
	private String statoPartita = "V";
	private List<DetrazioneFamiliareDocument> detrazioneFamiliareDocument;
	private String codiEmissione;
	private int codCodiEmissione;
	private int sequIdCedolino;
	private int idOrigineDati;
	private int sequIdFileElaborato;
	private int idPubblicazione = 1;
	private String codiStato = "P";
	private String codiTipoEmissione;
	private String elaborazione = "";
	private List<NumerositaEnteDocument> NumerositaEnteDocument;
	private int sequIdProtocollo;

	@Autowired
	private ServiceFacadeJDBC serviceFacadeJDBC;
	@Autowired
	private ServiceFacadeJDBCCedLoader serviceFacadeJDBCCedLoader;

	public void write(List<? extends Object> items) throws Exception {

		GestioneScarto scarto = new GestioneScarto();
		String errore = "";
		String fileName = "";
		String tipoModelloElaborazione = "";

		LOG.info(">>> WriterFileCedLoader - start");

		postEmissioneDocument = serviceFacadeJDBC.getPostemissione(idPostemissione);
		Assert.notNull(postEmissioneDocument, "Nessuna post emissione con id:" + idPostemissione);
		fileName = nomeFile_origine;
		tipoModelloElaborazione = postEmissioneDocument.getTypeDocumento();
		codCodiEmissione = postEmissioneDocument.getProgEmissione();
		rata = postEmissioneDocument.getRata();
		codiEmissione = String.valueOf(postEmissioneDocument.getProgEmissione());

		if (codiEmissione.length() == 1) {
			codiEmissione = "0" + codiEmissione;
		}

		// recupero codDpt dal tag <cod_uff_resp> del file Xml
		if (items.get(0).getClass().equals(Cedolini.class)) {
			List<CedolinoType> listaCedolini = ((Cedolini) items.get(0)).getCedolino();
			codDptXml = listaCedolini.get(0).getTestata().getEnteApp().getCodUffResp();
			codDpt = serviceFacadeJDBCCedLoader.returnCodiDpt(codDptXml);
		} else if (items.get(0).getClass().equals(Cud.class)) {
			List<CudType> listaCud = ((Cud) items.get(0)).getCud();
			codDptXml = listaCud.get(0).getTestata().getEnteApp().getCodUffResp();
			codDpt = serviceFacadeJDBCCedLoader.returnCodiDpt(codDptXml);
		}

		// RECUPERO sequIdFileElaborato
		sequIdFileElaborato = serviceFacadeJDBCCedLoader.returnSequIdFileElaborato(nomeFile_origine);
		// RECUPERO idOrigineDati
		idOrigineDati = serviceFacadeJDBC.returnIdOrigineDati(idPostemissione, fileName, Constants.ARTEFATTI_PUBBLICATI);
		// RECUPERO ID PROCESSO PER HISTORY
		int idProcessoHistorty = serviceFacadeJDBCCedLoader.returnIdProcessoHistory(nomeFile_origine);
		// RECUPERO DT PROCESSO
		dtProcesso = serviceFacadeJDBCCedLoader.returnDtProcessoHistory(idProcessoHistorty);

		// recupero il tipo di elaborazione --- cedolino o cud ---
		if (tipoModelloElaborazione == "cedolino") {
			elaborazione = "STP";
			codiTipoEmissione = "1";
		} else {
			elaborazione = "CUD";
			codiTipoEmissione = "2";
		}

		// Inserimento Nuovo Step Trace History
		serviceFacadeJDBCCedLoader.insertHistoryProcesso(nomeFile_origine, dtProcesso, taskNameElabora);

		if (!(serviceFacadeJDBCCedLoader.countDXmlTotale(codiTipoEmissione, elaborazione, rata) > 0)) {
			serviceFacadeJDBCCedLoader.insertDXmlTotale(rata, elaborazione, numeroCiclo, codCodiEmissione, sequIdFileElaborato, codiTipoEmissione);
		}

		// INSERT D_XMLPROVINCIA
		try {
			serviceFacadeJDBCCedLoader.insertDXmlProvincia(fileName, codDpt, rata, elaborazione, numeroCiclo, codCodiEmissione,
					sequIdFileElaborato, codiTipoEmissione);
		} catch (Exception e) {
			LOG.error(ConstantsScarto.ERRORE_FILE_XML_ELABORATO_DESC + "Nome file: " + fileName);
			errore = ConstantsScarto.ERRORE_FILE_XML_ELABORATO_DESC + "Nome file: " + fileName;
			scarto.inserimentoScarto(serviceFacadeJDBCCedLoader, fileName, " ", ConstantsScarto.ERRORE_FILE_XML_ELABORATO, errore, idOrigineDati);
			throw e;
		}

		for (Object item : items) {
			if (item.getClass().equals(Cedolini.class)) {
				LOG.info("Elaborazione cedolino");
				elaboraCedolini((Cedolini) item);
			} else if (item.getClass().equals(Cud.class)) {
				LOG.info("Elaborazione CUD");
				elaboraCud((Cud) item);
			}
		}
	}

	private void elaboraCedolini(Cedolini item) throws Exception {
		GestioneScarto scarto = new GestioneScarto();
		String tipoEl = "Cedolino";
		String errore = "";
		String cf_old = "";

		String codiceFiscale;
		String cognomeNomeXml;
		String cognome;
		String nome;
		String dataNascita;
		String ultCifreIscr;
		String descSottositema;
		String idCedolino;
		String lingua;
		double totaleNetto;
		String codUfficioServizio;
		String barcode;
		String codEnte;
		try {

			List<CedolinoType> listaCedolini = item.getCedolino();

			for (CedolinoType cedolino : listaCedolini) {
				codiceFiscale = cedolino.getTestata().getAnagrafica().getCodFiscaleAmministrato();
				cognomeNomeXml = cedolino.getTestata().getAnagrafica().getCognome() + " " + cedolino.getTestata().getAnagrafica().getNome();
				cognome = cedolino.getTestata().getAnagrafica().getCognome();
				nome = cedolino.getTestata().getAnagrafica().getNome();
				dataNascita = cedolino.getTestata().getAnagrafica().getDataNascita();
				ultCifreIscr = cedolino.getTestata().getAnagrafica().getMatricola().getIscrizione().substring(cedolino.getTestata().getAnagrafica().getMatricola().getIscrizione().length() - 3, cedolino.getTestata().getAnagrafica().getMatricola().getIscrizione().length());
				descSottositema = item.getCodiceSistemaEmittente();
				final SimpleDateFormat sdf = new SimpleDateFormat("yyyyMM", Locale.ITALIAN);
				idCedolino = cedolino.getTestata().getIDCedolino();
				lingua = cedolino.getTestata().getLingua().toString();
				totaleNetto = cedolino.getTotali().getTotaleNettoNumber().doubleValue();
				codUfficioServizio = cedolino.getTestata().getEnteApp().getCodSedeUffServizio();
				barcode = cedolino.getTestata().getBarcode();
				codEnte = cedolino.getTestata().getEnteApp().getCodEnte();

				if (!codDptXml.equals(cedolino.getTestata().getEnteApp().getCodUffResp())) {
					// crea scarto con codice errore 813
					errore = ConstantsScarto.ERRORE_COD_DPT_DESC + " il codice Ufficio Responsabile: " + cedolino.getTestata().getEnteApp().getCodUffResp() + " ï¿½ diverso dal codice: " + codDptXml;
					scarto.inserimentoScarto(serviceFacadeJDBCCedLoader, nomeFile_origine, " ", ConstantsScarto.ERRORE_COD_DPT, errore, idOrigineDati);
					throw new Exception(errore);
				}
				double quintoCedibile = 0.00;

				if (cedolino.getTotali().getQuintoCedibile() != null) {
					quintoCedibile = cedolino.getTotali().getQuintoCedibileNumber().doubleValue();
				}
				// RECUPERO ID DOCUMENTO
				int idDocumento = serviceFacadeJDBC.returnIdDocumento(tipoEl);
				// RECUPERO LA DATA ATTUALE NEL FORMATO "AAAAMM"
				String dataStr = sdf.format(postEmissioneDocument.getDataEmissione());
				sdf.applyPattern("yyyyMM");
				// COMPONGO IL NOME DEL FILE PDF
				String nomeFilePDF = descSottositema + "_" + String.valueOf(idDocumento) + "_" + cedolino.getTestata().getAnagrafica().getMatricola().getIscrizione() + "_" + rata + "_" + dataStr + "_"
						+ idCedolino + "_" + lingua + ".pdf";
				// Query :S_UTENTE_BY_CF --- INIZIO ---
				int countCF = serviceFacadeJDBCCedLoader.countCF(cedolino.getTestata().getAnagrafica().getCodFiscaleAmministrato());

				if (countCF == 0) {
					// inserisci in anagrafica
					serviceFacadeJDBCCedLoader.insertDUtente(cedolino.getTestata().getAnagrafica().getCodFiscaleAmministrato(), cognomeNomeXml, cognome, nome, dataNascita);
				} else {
					String cognomeNome = serviceFacadeJDBCCedLoader.returnCognomeNome(cedolino.getTestata().getAnagrafica().getCodFiscaleAmministrato());

					if ((countCF > 0) && (!(cognomeNomeXml.equals(cognomeNome)))) {
						LOG.info("File elaborato: " + nomeFile_origine + "\n cognome e nome recuperati dal db  :" + cognomeNome
								+ "\n cognome e nome recuperati dal xml :" + cognomeNomeXml);
						// update anagrafica
						serviceFacadeJDBCCedLoader.updateDUtente(cedolino.getTestata().getAnagrafica().getCodFiscaleAmministrato(), cognomeNomeXml, cognome, nome);
					}
				}

				// Query :S_UTENTE_BY_CF --- FINE ---
				// Query :S_CEDOLINO_CHECK_ISCRIZIONE_PARTITA_EXISTS --- INIZIO
				int countIscrizione = serviceFacadeJDBCCedLoader.countIscrizione(cedolino.getTestata().getAnagrafica().getMatricola().getIscrizione());

				if (countIscrizione == 0) {
					// insert D_PARTITA_STIPENDIALE
					serviceFacadeJDBCCedLoader.insertDPartitaStipendiale(cedolino.getTestata().getAnagrafica().getMatricola().getIscrizione(), cedolino.getTestata().getAnagrafica().getCodFiscaleAmministrato(), statoPartita);
					LOG.info("Inserisco la partita stipendiale: " + cedolino.getTestata().getAnagrafica().getMatricola().getIscrizione());
				}

				if (countIscrizione > 0) {
					// controlla cf db con cf xml
					int countIscrizioneCF = serviceFacadeJDBCCedLoader.countIscrizioneCF(cedolino.getTestata().getAnagrafica().getMatricola().getIscrizione(), cedolino.getTestata().getAnagrafica().getCodFiscaleAmministrato());

					if (countIscrizioneCF == 0) {

						// aggiorna cf utente
						// recupero vecchio codice fiscale
						cf_old = serviceFacadeJDBCCedLoader.returnCfIscrizione(cedolino.getTestata().getAnagrafica().getMatricola().getIscrizione());

						LOG.info("File elaborato: " + nomeFile_origine + "\n codice fiscale recuperato dal db  :" + cf_old
								+ "\n codice fiscale recuperato dal xml :" + cedolino.getTestata().getAnagrafica().getCodFiscaleAmministrato() + "\n id partita stipendiale  :" + cedolino.getTestata().getAnagrafica().getMatricola().getIscrizione());
						// insert D_HISTORY_CF
						try {
							serviceFacadeJDBCCedLoader.insertDHistoryCf(cf_old, cedolino.getTestata().getAnagrafica().getCodFiscaleAmministrato());
						} catch (Exception e) {
							LOG.error("Errore inserimento D_HISTORY_CF; CF_OLD: " + cf_old + " CF_NEW: " + cedolino.getTestata().getAnagrafica().getCodFiscaleAmministrato());
							// crea scarto con codice errore 814
							errore = ConstantsScarto.ERRORE_INSERT_D_HISTORY_CF_DESC + " CF_OLD: " + cf_old + " CF_NEW: " + cedolino.getTestata().getAnagrafica().getCodFiscaleAmministrato();
							scarto.inserimentoScarto(serviceFacadeJDBCCedLoader, nomeFile_origine, " ", ConstantsScarto.ERRORE_INSERT_D_HISTORY_CF, errore, idOrigineDati);
							throw e;
						}
						// update D_HISTORY_IBAN
						try {
							serviceFacadeJDBCCedLoader.updateDHistoryIban(cf_old, cedolino.getTestata().getAnagrafica().getCodFiscaleAmministrato());
						} catch (Exception e) {
							LOG.error("Errore aggiornamento D_HISTORY_IBAN; CF_OLD: " + cf_old + " CF_NEW: " + cedolino.getTestata().getAnagrafica().getCodFiscaleAmministrato());
							// crea scarto con codice errore 815
							errore = ConstantsScarto.ERRORE_UPDATE_D_HISTORY_IBAN_DESC + " CF_OLD: " + cf_old + " CF_NEW: " + cedolino.getTestata().getAnagrafica().getCodFiscaleAmministrato();
							scarto.inserimentoScarto(serviceFacadeJDBCCedLoader, nomeFile_origine, " ", ConstantsScarto.ERRORE_UPDATE_D_HISTORY_IBAN, errore, idOrigineDati);
							throw e;
						}
						// update D_EMAIL_UTENTE
						try {
							serviceFacadeJDBCCedLoader.updateDEmailUtente(cf_old, cedolino.getTestata().getAnagrafica().getCodFiscaleAmministrato());
						} catch (Exception e) {
							LOG.error("Errore aggiornamento D_EMAIL_UTENTE; CF_OLD: " + cf_old + " CF_NEW: " + cedolino.getTestata().getAnagrafica().getCodFiscaleAmministrato());
							// crea scarto con codice errore 816
							errore = ConstantsScarto.ERRORE_UPDATE_D_EMAIL_UTENTE_DESC + " CF_OLD: " + cf_old + " CF_NEW: " + cedolino.getTestata().getAnagrafica().getCodFiscaleAmministrato();
							scarto.inserimentoScarto(serviceFacadeJDBCCedLoader, nomeFile_origine, " ", ConstantsScarto.ERRORE_UPDATE_D_EMAIL_UTENTE, errore, idOrigineDati);
							throw e;
						}
						// update D_HISTORY_BONUS_FISCALE
						try {
							serviceFacadeJDBCCedLoader.updateDHistoryBonusFiscale(cf_old, cedolino.getTestata().getAnagrafica().getCodFiscaleAmministrato());
						} catch (Exception e) {
							LOG.error("Errore aggiornamento D_HISTORY_BONUS_FISCALE; CF_OLD: " + cf_old + " CF_NEW: " + cedolino.getTestata().getAnagrafica().getCodFiscaleAmministrato());
							// crea scarto con codice errore 817
							errore = ConstantsScarto.ERRORE_UPDATE_D_HISTORY_BONUS_FISCALE_DESC + " CF_OLD: " + cf_old + " CF_NEW: " + cedolino.getTestata().getAnagrafica().getCodFiscaleAmministrato();
							scarto.inserimentoScarto(serviceFacadeJDBCCedLoader, nomeFile_origine, " ", ConstantsScarto.ERRORE_UPDATE_D_HISTORY_BONUS_FISCALE, errore, idOrigineDati);
							throw e;
						}
						// U_DETRAZIONE_FAMILIARE_INSERT
						try {
							detrazioneFamiliareDocument = serviceFacadeJDBCCedLoader.getDetrazioneFamiliare(cf_old);

							for (DetrazioneFamiliareDocument dfd : detrazioneFamiliareDocument) {

								// RECUPERO IL VALORE DI SEQU_ID_PROTOCOLLO PER INSERT CEDOLINO
								sequIdProtocollo = serviceFacadeJDBCCedLoader.sequIdProtocollo();

								serviceFacadeJDBCCedLoader.insertProtocolloCedolino(sequIdProtocollo, dfd.getAnnoInvio());

								serviceFacadeJDBCCedLoader.insertdDetrazioneFamiliare(cedolino.getTestata().getAnagrafica().getCodFiscaleAmministrato(), sequIdProtocollo, dfd.getImpoRedditoComplessivo(),
										dfd.getFlagDirittoDetrazione(), dfd.getAnnomeseDecorrenza(), dfd.getCodiStato(), dfd.getDataInvio(),
										dfd.getAnnomeseApplicazione(), dfd.getEsitoAcquisizione(),
										dfd.getDescrizioneEsitoAcquisizione(), dfd.getDataAcquisizione(), dfd.getAnnoInvio());

								// UPDATE D_FAMILIARE_A_CARICO
								serviceFacadeJDBCCedLoader.updateFamiliareACarico(cf_old, cedolino.getTestata().getAnagrafica().getCodFiscaleAmministrato(), sequIdProtocollo, dfd.getIdProtocollo(), dfd.getAnnoInvio());
							}
						} catch (Exception e) {
							LOG.error("Errore inserimento D_DETRAZIONE_FAMILIARE; CF_OLD: " + cf_old + " CF_NEW: " + cedolino.getTestata().getAnagrafica().getCodFiscaleAmministrato());
							// crea scarto con codice errore 818
							errore = ConstantsScarto.ERRORE_INSERT_D_DETRAZIONE_FAMILIARE_DESC + " CF_OLD: " + cf_old + " CF_NEW: " + cedolino.getTestata().getAnagrafica().getCodFiscaleAmministrato();
							scarto.inserimentoScarto(serviceFacadeJDBCCedLoader, nomeFile_origine, " ", ConstantsScarto.ERRORE_INSERT_D_DETRAZIONE_FAMILIARE, errore, idOrigineDati);
							throw e;
						}
						// DELETE U_DETRAZIONE_FAMILIARE
						try {
							serviceFacadeJDBCCedLoader.deleteDetrazioneFamiliare(cf_old);
						} catch (Exception e) {
							LOG.error("Errore eliminazione D_DETRAZIONE_FAMILIARE; CF_OLD: " + cf_old + " CF_NEW: " + cedolino.getTestata().getAnagrafica().getCodFiscaleAmministrato());
							// crea scarto con codice errore 819
							errore = ConstantsScarto.ERRORE_DELETE_D_DETRAZIONE_FAMILIARE_DESC + " CF_OLD: " + cf_old + " CF_NEW: " + cedolino.getTestata().getAnagrafica().getCodFiscaleAmministrato();
							scarto.inserimentoScarto(serviceFacadeJDBCCedLoader, nomeFile_origine, " ", ConstantsScarto.ERRORE_DELETE_D_DETRAZIONE_FAMILIARE, errore, idOrigineDati);
							throw e;
						}
						// D_DETRAZIONI_BY_CF
						// UPDATE D_PARTITA_STIPENDIALE
						try {
							serviceFacadeJDBCCedLoader.updatePartitaStipendiale(cf_old, cedolino.getTestata().getAnagrafica().getCodFiscaleAmministrato());

						} catch (Exception e) {
							LOG.error("Errore aggiornamento D_PARTITA_STIPENDIALE; CF_OLD: " + cf_old + " CF_NEW: " + cedolino.getTestata().getAnagrafica().getCodFiscaleAmministrato());
							// crea scarto con codice errore 820
							errore = ConstantsScarto.ERRORE_UPDATE_D_PARTITA_STIPENDIALE_DESC + " CF_OLD: " + cf_old + " CF_NEW: " + cedolino.getTestata().getAnagrafica().getCodFiscaleAmministrato();
							scarto.inserimentoScarto(serviceFacadeJDBCCedLoader, nomeFile_origine, " ", ConstantsScarto.ERRORE_UPDATE_D_PARTITA_STIPENDIALE, errore, idOrigineDati);
							throw e;
						}
						// UPDATE D_730_UPLOAD
						try {
							serviceFacadeJDBCCedLoader.updateD730Upload(cf_old, cedolino.getTestata().getAnagrafica().getCodFiscaleAmministrato());
						} catch (Exception e) {
							LOG.error("Errore aggiornamento D_730_UPLOAD; CF_OLD: " + cf_old + " CF_NEW: " + cedolino.getTestata().getAnagrafica().getCodFiscaleAmministrato());
							// crea scarto con codice errore 821
							errore = ConstantsScarto.ERRORE_UPDATE_D_730_UPLOAD_DESC + " CF_OLD: " + cf_old + " CF_NEW: " + cedolino.getTestata().getAnagrafica().getCodFiscaleAmministrato();
							scarto.inserimentoScarto(serviceFacadeJDBCCedLoader, nomeFile_origine, " ", ConstantsScarto.ERRORE_UPDATE_D_730_UPLOAD, errore, idOrigineDati);
							throw e;
						}
						// UPDATE D_730
						try {
							serviceFacadeJDBCCedLoader.updateD730(cf_old, cedolino.getTestata().getAnagrafica().getCodFiscaleAmministrato());
						} catch (Exception e) {
							LOG.error("Errore aggiornamento D_730; CF_OLD: " + cf_old + " CF_NEW: " + cedolino.getTestata().getAnagrafica().getCodFiscaleAmministrato());
							// crea scarto con codice errore 822
							errore = ConstantsScarto.ERRORE_UPDATE_D_730_DESC + " CF_OLD: " + cf_old + " CF_NEW: " + cedolino.getTestata().getAnagrafica().getCodFiscaleAmministrato();
							scarto.inserimentoScarto(serviceFacadeJDBCCedLoader, nomeFile_origine, " ", ConstantsScarto.ERRORE_UPDATE_D_730, errore, idOrigineDati);
							throw e;
						}
						// UPDATE D_PPI_ANAGRAFICA_DIPENDENTE
						try {
							serviceFacadeJDBCCedLoader.updateDPpiAnagraficaDipendente(cf_old, cedolino.getTestata().getAnagrafica().getCodFiscaleAmministrato());
						} catch (Exception e) {
							LOG.error("Errore aggiornamento D_PPI_ANAGRAFICA_DIPENDENTE; CF_OLD: " + cf_old + " CF_NEW: " + cedolino.getTestata().getAnagrafica().getCodFiscaleAmministrato());
							// crea scarto con codice errore 823
							errore = ConstantsScarto.ERRORE_UPDATE_D_PPI_ANAGRAFICA_DIPENDENTE_DESC + " CF_OLD: " + cf_old + " CF_NEW: " + cedolino.getTestata().getAnagrafica().getCodFiscaleAmministrato();
							scarto.inserimentoScarto(serviceFacadeJDBCCedLoader, nomeFile_origine, " ", ConstantsScarto.ERRORE_UPDATE_D_PPI_ANAGRAFICA_DIPENDENTE, errore, idOrigineDati);
							throw e;
						}
						// UPDATE D_PPI_DATI_PRESTITO_RICHIESTO
						try {
							serviceFacadeJDBCCedLoader.updateDPpiDatiPrestitoRichiesto(cf_old, cedolino.getTestata().getAnagrafica().getCodFiscaleAmministrato());
						} catch (Exception e) {
							LOG.error("Errore aggiornamento D_PPI_DATI_PRESTITO_RICHIESTO; CF_OLD: " + cf_old + " CF_NEW: " + cedolino.getTestata().getAnagrafica().getCodFiscaleAmministrato());
							// crea scarto con codice errore 824
							errore = ConstantsScarto.ERRORE_UPDATE_D_PPI_DATI_PRESTITO_RICHIESTO_DESC + " CF_OLD: " + cf_old + " CF_NEW: " + cedolino.getTestata().getAnagrafica().getCodFiscaleAmministrato();
							scarto.inserimentoScarto(serviceFacadeJDBCCedLoader, nomeFile_origine, " ", ConstantsScarto.ERRORE_UPDATE_D_PPI_DATI_PRESTITO_RICHIESTO, errore, idOrigineDati);
							throw e;
						}
						// UPDATE D_PPI_QUINTO_CEDIBILE
						try {
							serviceFacadeJDBCCedLoader.updateDPpiQuintoCedibile(cf_old, cedolino.getTestata().getAnagrafica().getCodFiscaleAmministrato());
						} catch (Exception e) {
							LOG.error("Errore aggiornamento D_PPI_QUINTO_CEDIBILE; CF_OLD: " + cf_old + " CF_NEW: " + cedolino.getTestata().getAnagrafica().getCodFiscaleAmministrato());
							// crea scarto con codice errore 825
							errore = ConstantsScarto.ERRORE_UPDATE_D_PPI_QUINTO_CEDIBILE_DESC + " CF_OLD: " + cf_old + " CF_NEW: " + cedolino.getTestata().getAnagrafica().getCodFiscaleAmministrato();
							scarto.inserimentoScarto(serviceFacadeJDBCCedLoader, nomeFile_origine, " ", ConstantsScarto.ERRORE_UPDATE_D_PPI_QUINTO_CEDIBILE, errore, idOrigineDati);
							throw e;
						}
						// UPDATE D_PPI_STORICO_DATI_PRESTITO
						try {
							serviceFacadeJDBCCedLoader.updateDPpiStoricoDatiPrestito(cf_old, cedolino.getTestata().getAnagrafica().getCodFiscaleAmministrato());
						} catch (Exception e) {
							LOG.error("Errore aggiornamento D_PPI_STORICO_DATI_PRESTITO; CF_OLD: " + cf_old + " CF_NEW: " + cedolino.getTestata().getAnagrafica().getCodFiscaleAmministrato());
							// crea scarto con codice errore 826
							errore = ConstantsScarto.ERRORE_UPDATE_D_PPI_STORICO_DATI_PRESTITO_DESC + " CF_OLD: " + cf_old + " CF_NEW: " + cedolino.getTestata().getAnagrafica().getCodFiscaleAmministrato();
							scarto.inserimentoScarto(serviceFacadeJDBCCedLoader, nomeFile_origine, " ", ConstantsScarto.ERRORE_UPDATE_D_PPI_STORICO_DATI_PRESTITO, errore, idOrigineDati);
							throw e;
						}
						// DELETE D_UTENTE_BY_CF
						try {
							serviceFacadeJDBCCedLoader.deleteCfOld(cf_old);
						} catch (Exception e) {
							LOG.error("Errore eliminazione D_UTENTE; CF_OLD: " + cf_old + " CF_NEW: " + cedolino.getTestata().getAnagrafica().getCodFiscaleAmministrato());
							// crea scarto con codice errore 827
							errore = ConstantsScarto.ERRORE_DELETE_D_UTENTE_DESC + " CF_OLD: " + cf_old + " CF_NEW: " + cedolino.getTestata().getAnagrafica().getCodFiscaleAmministrato();
							scarto.inserimentoScarto(serviceFacadeJDBCCedLoader, nomeFile_origine, " ", ConstantsScarto.ERRORE_DELETE_D_UTENTE, errore, idOrigineDati);
							throw e;
						}
						cf_old = null;
					}
					// FINE aggiornamento CF
				}

				// Query :S_CEDOLINO_CHECK_ISCRIZIONE_PARTITA_EXISTS --- FINE
				// UPDATE D_PARTITA_STIPENDIALE - stato partita
				try {
					serviceFacadeJDBCCedLoader.updatePartitaStipendialeStato(statoPartita, cedolino.getTestata().getAnagrafica().getMatricola().getIscrizione());
				} catch (Exception e) {
					// crea scarto con codice errore 811
					errore = ConstantsScarto.ERRORE_PARTITA_STIPENDIALE_DESC + "partitaStipendiale: " + cedolino.getTestata().getAnagrafica().getMatricola().getIscrizione();
					scarto.inserimentoScarto(serviceFacadeJDBCCedLoader, nomeFile_origine, " ", ConstantsScarto.ERRORE_PARTITA_STIPENDIALE, errore, idOrigineDati);
					throw e;
				}
				// solo esiste quinto cedibile
				int countQuintoCedibile = serviceFacadeJDBCCedLoader.countQuintoCedibile(codiceFiscale);

				if (countQuintoCedibile > 0) {
					serviceFacadeJDBCCedLoader.deleteQuintoCedibile(codiceFiscale);
				}

				/*
				 * // File exist String directory = filePDFDir + "/STP/" + rata
				 * + "/"+ ultCifreIscr.toString(); File propFile = null; try {
				 *
				 * propFile = new File(directory, nomeFilePDF);
				 *
				 * if (!propFile.exists()) throw new Exception(); } catch
				 * (Exception e) { logger.error("File pdf non trovato :" +
				 * nomeFilePDF); errore =
				 * ConstantsScarto.ERRORE_FILE_PDF_INESISTENTE_DESC +
				 * "Nome file pdf: " + nomeFilePDF;
				 * scarto.inserimentoScarto(serviceFacadeJDBCCedLoader,
				 * nomeFile_origine, nomeFilePDF,
				 * ConstantsScarto.ERRORE_FILE_PDF_INESISTENTE, errore,
				 * idOrigineDati); throw e; }
				 * //LOG.error("File pdf trovato :" + nomeFilePDF);
				 */
				// RECUPERO IL VALORE DI SEQU_ID_CEDOLINO PER INSERT CEDOLINO
				sequIdCedolino = serviceFacadeJDBCCedLoader.sequIdCedolino();

				try {
					serviceFacadeJDBCCedLoader.insertDCedolino(dataStr, idCedolino, totaleNetto, nomeFilePDF, codUfficioServizio, codiEmissione, rata,
							numeroCiclo, cedolino.getTestata().getAnagrafica().getMatricola().getIscrizione(), nomeFile_origine, barcode, codiTipoEmissione, codEnte, codDpt, sequIdCedolino, quintoCedibile);
				} catch (Exception e) {
					LOG.error("L''associazione codice ente, dpt e codice ufficio di servizio non risulta essere presente nell''anagrafica degli enti!");
					// crea scarto con codice errore 400
					errore = ConstantsScarto.ERRORE_CODICE_ENTE_NON_PRESENTE_DESC + "Nome file: " + nomeFile_origine;
					scarto.inserimentoScarto(serviceFacadeJDBCCedLoader, nomeFile_origine, " ", ConstantsScarto.ERRORE_CODICE_ENTE_NON_PRESENTE, errore, idOrigineDati);
					throw e;
				}
				// fine for su oggetti
			}

			if (errore == "") {
				try {
					// Restituisce il numero di oggetti contenuti nel file .xml
					int numNumeroOggetti = serviceFacadeJDBCCedLoader.countNumeroOggetti(nomeFile_origine);
					LOG.info("NumeroCedolini: " + numNumeroOggetti + " File origine: " + nomeFile_origine);
					// Restituisce il numero di utenti contenuti nel file .xml
					int numeroUtenti = serviceFacadeJDBCCedLoader.countNumeroUtenti(nomeFile_origine);
					LOG.info("numeroUtenti: " + numeroUtenti + " File origine: " + nomeFile_origine);
					// Restituisce la somma degli importi netti dei singoli cedolini contenuti nel file .xml
					//Double totImportiNetti = serviceFacadeJDBCCedLoader.countNumTotaleModello(nomeFile_origine);
					Double totImportiNetti = serviceFacadeJDBCCedLoader.countNumTotaleModello(rata, codiTipoEmissione, numeroCiclo);
					LOG.info("totImportiNetti: " + totImportiNetti + " File origine: " + nomeFile_origine);
					// Restituisce la numerositï¿½ degli scarti per ciascun file xml
					int numRecordScarto = 1;
					// Aggiorna i dati generali riguardanti la provincia
					serviceFacadeJDBCCedLoader.updateDXmlProvincia(numNumeroOggetti, numeroUtenti, numRecordScarto, nomeFile_origine, codDpt);
					// update D_XMLTOTALE
					serviceFacadeJDBCCedLoader.updateDXmlTotale(totImportiNetti, rata, elaborazione, codiTipoEmissione);
					// INSERT INTO D_XMLTOTALEPUBBLICAZIONE
					if (!(serviceFacadeJDBCCedLoader.countDXmlTotalePubblicazione(idPubblicazione, rata, elaborazione, codiTipoEmissione) > 0)) {
						serviceFacadeJDBCCedLoader.insertDXmlTotalePubblicazione(idPubblicazione, sequIdFileElaborato, codiStato, rata,
								codiTipoEmissione, elaborazione);
					}
					// INSERT INTO D_XMLTOTALEPROVINCIA
					if (!(serviceFacadeJDBCCedLoader.countDXmlTotaleProvincia(idPubblicazione, codDpt, numeroCiclo, rata, elaborazione, codiTipoEmissione) > 0)) {
						serviceFacadeJDBCCedLoader.insertDXmlTotaleProvincia(idPubblicazione, codDpt, numeroCiclo, numeroUtenti, numNumeroOggetti, rata,
								sequIdFileElaborato, codiTipoEmissione, elaborazione);
					} else {
						// updateDXmlTotaleProvincia
						serviceFacadeJDBCCedLoader.updateDXmlTotaleProvincia(idPubblicazione, codDpt, numeroCiclo, numeroUtenti, numNumeroOggetti, rata,
								codiTipoEmissione, elaborazione);
					}
					// Restituisce la numerositï¿½ dei cedolini per ciascun Ente contenuti nel file xml
					//NumerositaEnteDocument = serviceFacadeJDBCCedLoader.getNumerositaXEnte(nomeFile_origine);
					NumerositaEnteDocument = serviceFacadeJDBCCedLoader.getNumerositaXEnte(rata, codiTipoEmissione, numeroCiclo, codDpt);

					for (NumerositaEnteDocument ned : NumerositaEnteDocument) {
						//int numeroUtentiXEnte = serviceFacadeJDBCCedLoader.countNumeroUtentiXEnte(ned.getCodiEnte(),rata, codiTipoEmissione, numeroCiclo, codDpt);
						if (!(serviceFacadeJDBCCedLoader.countDXmlTotaleXEnte(codiTipoEmissione, elaborazione, rata, ned.getCodiEnte()) > 0)) {
							// Inserisce un record in D_XMLTOTALEXENTE
							serviceFacadeJDBCCedLoader.insertDXmlTotalexEnte(ned.getCountEnte(), ned.getCodiEnte(), sequIdFileElaborato, rata,
									codiTipoEmissione, elaborazione);
						} else {
							serviceFacadeJDBCCedLoader.updateDXmlTotaleXEnte(ned.getCountEnte(), ned.getCodiEnte(), rata, codiTipoEmissione, elaborazione);
						}

						// D_XMLTOTALEPROVINCIAXENTE
						if (!(serviceFacadeJDBCCedLoader
								.countDXmlTotaleProvinciaXEnte(ned.getCodiEnte(), idPubblicazione, codDpt, numeroCiclo, rata, codiTipoEmissione, elaborazione) > 0)) {
							serviceFacadeJDBCCedLoader.insertDXmlTotaleProvinciaxEnte(ned.getCodiEnte(), idPubblicazione, codDpt, numeroCiclo, ned.getCountEnte(),
									sequIdFileElaborato, rata, codiTipoEmissione, elaborazione);
						} else {
							serviceFacadeJDBCCedLoader.updateDXmlTotaleProvinciaXEnte(ned.getCodiEnte(), idPubblicazione, codDpt, numeroCiclo, ned.getCountEnte(),
									rata, codiTipoEmissione, elaborazione);
						}
					}

				} catch (Exception e) {
					// errore 407
					LOG.error(ConstantsScarto.ERRORE_CARICAMENTI_TOTALE_DESC + "Nome file: " + nomeFile_origine, e);
					errore = ConstantsScarto.ERRORE_CARICAMENTI_TOTALE_DESC + "Nome file: " + nomeFile_origine;
					scarto.inserimentoScarto(serviceFacadeJDBCCedLoader, nomeFile_origine, " ", ConstantsScarto.ERRORE_CARICAMENTI_TOTALE, errore, idOrigineDati);
					throw e;
				}

			}

		} catch (Exception e) {
			LOG.error(ConstantsScarto.ERRORE_FILE_GENERICO_DESC + "Nome file: " + nomeFile_origine, e);
			errore = ConstantsScarto.ERRORE_FILE_GENERICO_DESC + "Nome file: " + nomeFile_origine;
			scarto.inserimentoScarto(serviceFacadeJDBCCedLoader, nomeFile_origine, " ", ConstantsScarto.ERRORE_FILE_GENERICO, errore, idOrigineDati);
			throw e;
		}
	}

	private void elaboraCud(Cud item) throws Exception {
		GestioneScarto scarto = new GestioneScarto();
		String errore = "";
		String cf_old = "";
		String tipoEl = "CUD";

		String codiceFiscale;
		String cognomeNomeXml;
		String cognome;
		String nome;
		String dataNascita;
		String partitaStipendiale;
		String ultCifreIscr;
		String descSottositema;
		String idCud;
		String lingua;
		String codUfficioServizio;
		String barcode;
		String codEnte;

		try {

			List<CudType> listaCud = item.getCud();

			for (CudType cud : listaCud) {
				codiceFiscale = cud.getTestata().getAnagrafica().getCodFiscaleAmministrato();
				cognomeNomeXml = cud.getTestata().getAnagrafica().getCognome() + " " + cud.getTestata().getAnagrafica().getNome();
				cognome = cud.getTestata().getAnagrafica().getCognome();
				nome = cud.getTestata().getAnagrafica().getNome();
				dataNascita = cud.getTestata().getAnagrafica().getDataNascita();
				partitaStipendiale = cud.getTestata().getAnagrafica().getMatricola().getIscrizione();
				ultCifreIscr = partitaStipendiale.substring(partitaStipendiale.length() - 3, partitaStipendiale.length());
				descSottositema = item.getCodiceSistemaEmittente();
				final SimpleDateFormat sdf = new SimpleDateFormat("yyyyMM", Locale.ITALIAN);
				idCud = cud.getTestata().getIDCedolino();
				lingua = cud.getTestata().getLingua().toString();
				codUfficioServizio = cud.getTestata().getEnteApp().getCodSedeUffServizio();
				barcode = cud.getTestata().getBarcode();
				codEnte = cud.getTestata().getEnteApp().getCodEnte();

				if (!codDptXml.equals(cud.getTestata().getEnteApp().getCodUffResp())) {
					// crea scarto con codice errore 813
					errore = ConstantsScarto.ERRORE_COD_DPT_DESC + " il codice Ufficio Responsabile: " + cud.getTestata().getEnteApp().getCodUffResp()
							+ " ï¿½ diverso dal codice: " + codDptXml;
					scarto.inserimentoScarto(serviceFacadeJDBCCedLoader, nomeFile_origine, " ", ConstantsScarto.ERRORE_COD_DPT, errore, idOrigineDati);
					throw new Exception(errore);
				}

				// RECUPERO ID DOCUMENTO
				int idDocumento = serviceFacadeJDBC.returnIdDocumento(tipoEl);
				// RECUPERO LA DATA ATTUALE NEL FORMATO "AAAAMM"
				String dataStr = sdf.format(new Date());
				sdf.applyPattern("yyyyMM");
				// COMPONGO IL NOME DEL FILE PDF
				String nomeFilePDF = descSottositema + "_" + String.valueOf(idDocumento) + "_" + partitaStipendiale + "_" + rata + "_" + dataStr + "_"
						+ idCud + "_" + lingua + ".pdf";

				int countCF = serviceFacadeJDBCCedLoader.countCF(codiceFiscale);

				if (countCF == 0) {
					// inserisci in anagrafica
					serviceFacadeJDBCCedLoader.insertDUtente(codiceFiscale, cognomeNomeXml, cognome, nome, dataNascita);
				} else {
					String cognomeNome = serviceFacadeJDBCCedLoader.returnCognomeNome(codiceFiscale);
					if ((countCF > 0) && (!(cognomeNomeXml.equals(cognomeNome)))) {
						LOG.info("File elaborato: " + nomeFile_origine + "\n cognome e nome recuperati dal db  :" + cognomeNome
								+ "\n cognome e nome recuperati dal xml :" + cognomeNomeXml);
						// update anagrafica
						serviceFacadeJDBCCedLoader.updateDUtente(codiceFiscale, cognomeNomeXml, cognome, nome);
					}
				}

				// Query :S_CEDOLINO_CHECK_ISCRIZIONE_PARTITA_EXISTS --- INIZIO
				int countIscrizione = serviceFacadeJDBCCedLoader.countIscrizione(partitaStipendiale);
				if (countIscrizione == 0) {
					// insert D_PARTITA_STIPENDIALE
					serviceFacadeJDBCCedLoader.insertDPartitaStipendiale(partitaStipendiale, codiceFiscale, statoPartita);
				}

				if (countIscrizione > 0) {
					// controlla cf db con cf xml
					int countIscrizioneCF = serviceFacadeJDBCCedLoader.countIscrizioneCF(partitaStipendiale, codiceFiscale);
					if (countIscrizioneCF == 0) {

						// aggiorna cf utente
						// recupero vecchio codice fiscale
						cf_old = serviceFacadeJDBCCedLoader.returnCfIscrizione(partitaStipendiale);

						LOG.info("File elaborato: " + nomeFile_origine + "\n codice fiscale recuperato dal db  :" + cf_old
								+ "\n codice fiscale recuperato dal xml :" + codiceFiscale + "\n id partita stipendiale  :" + partitaStipendiale);

						// insert D_HISTORY_CF
						try {
							serviceFacadeJDBCCedLoader.insertDHistoryCf(cf_old, cud.getTestata().getAnagrafica().getCodFiscaleAmministrato());
						} catch (Exception e) {
							LOG.error("Errore inserimento D_HISTORY_CF; CF_OLD: " + cf_old + " CF_NEW: " + cud.getTestata().getAnagrafica().getCodFiscaleAmministrato());
							// crea scarto con codice errore 814
							errore = ConstantsScarto.ERRORE_INSERT_D_HISTORY_CF_DESC + " CF_OLD: " + cf_old + " CF_NEW: " + cud.getTestata().getAnagrafica().getCodFiscaleAmministrato();
							scarto.inserimentoScarto(serviceFacadeJDBCCedLoader, nomeFile_origine, " ", ConstantsScarto.ERRORE_INSERT_D_HISTORY_CF, errore, idOrigineDati);
							throw e;
						}
						// update D_HISTORY_IBAN
						try {
							serviceFacadeJDBCCedLoader.updateDHistoryIban(cf_old, cud.getTestata().getAnagrafica().getCodFiscaleAmministrato());
						} catch (Exception e) {
							LOG.error("Errore aggiornamento D_HISTORY_IBAN; CF_OLD: " + cf_old + " CF_NEW: " + cud.getTestata().getAnagrafica().getCodFiscaleAmministrato());
							// crea scarto con codice errore 815
							errore = ConstantsScarto.ERRORE_UPDATE_D_HISTORY_IBAN_DESC + " CF_OLD: " + cf_old + " CF_NEW: " + cud.getTestata().getAnagrafica().getCodFiscaleAmministrato();
							scarto.inserimentoScarto(serviceFacadeJDBCCedLoader, nomeFile_origine, " ", ConstantsScarto.ERRORE_UPDATE_D_HISTORY_IBAN, errore, idOrigineDati);
							throw e;
						}
						// update D_EMAIL_UTENTE
						try {
							serviceFacadeJDBCCedLoader.updateDEmailUtente(cf_old, cud.getTestata().getAnagrafica().getCodFiscaleAmministrato());
						} catch (Exception e) {
							LOG.error("Errore aggiornamento D_EMAIL_UTENTE; CF_OLD: " + cf_old + " CF_NEW: " + cud.getTestata().getAnagrafica().getCodFiscaleAmministrato());
							// crea scarto con codice errore 816
							errore = ConstantsScarto.ERRORE_UPDATE_D_EMAIL_UTENTE_DESC + " CF_OLD: " + cf_old + " CF_NEW: " + cud.getTestata().getAnagrafica().getCodFiscaleAmministrato();
							scarto.inserimentoScarto(serviceFacadeJDBCCedLoader, nomeFile_origine, " ", ConstantsScarto.ERRORE_UPDATE_D_EMAIL_UTENTE, errore, idOrigineDati);
							throw e;
						}
						// update D_HISTORY_BONUS_FISCALE
						try {
							serviceFacadeJDBCCedLoader.updateDHistoryBonusFiscale(cf_old, cud.getTestata().getAnagrafica().getCodFiscaleAmministrato());
						} catch (Exception e) {
							LOG.error("Errore aggiornamento D_HISTORY_BONUS_FISCALE; CF_OLD: " + cf_old + " CF_NEW: " + cud.getTestata().getAnagrafica().getCodFiscaleAmministrato());
							// crea scarto con codice errore 817
							errore = ConstantsScarto.ERRORE_UPDATE_D_HISTORY_BONUS_FISCALE_DESC + " CF_OLD: " + cf_old + " CF_NEW: " + cud.getTestata().getAnagrafica().getCodFiscaleAmministrato();
							scarto.inserimentoScarto(serviceFacadeJDBCCedLoader, nomeFile_origine, " ", ConstantsScarto.ERRORE_UPDATE_D_HISTORY_BONUS_FISCALE, errore, idOrigineDati);
							throw e;
						}

						// U_DETRAZIONE_FAMILIARE_INSERT
						try {
							detrazioneFamiliareDocument = serviceFacadeJDBCCedLoader.getDetrazioneFamiliare(cf_old);

							for (DetrazioneFamiliareDocument dfd : detrazioneFamiliareDocument) {

								// RECUPERO IL VALORE DI SEQU_ID_PROTOCOLLO PER INSERT CEDOLINO
								sequIdProtocollo = serviceFacadeJDBCCedLoader.sequIdProtocollo();

								serviceFacadeJDBCCedLoader.insertProtocolloCedolino(sequIdProtocollo, dfd.getAnnoInvio());

								serviceFacadeJDBCCedLoader.insertdDetrazioneFamiliare(codiceFiscale, sequIdProtocollo, dfd.getImpoRedditoComplessivo(),
										dfd.getFlagDirittoDetrazione(), dfd.getAnnomeseDecorrenza(), dfd.getCodiStato(), dfd.getDataInvio(),
										dfd.getAnnomeseApplicazione(), dfd.getEsitoAcquisizione(),
										dfd.getDescrizioneEsitoAcquisizione(),
										dfd.getDataAcquisizione(), dfd.getAnnoInvio());

								// UPDATE D_FAMILIARE_A_CARICO
								serviceFacadeJDBCCedLoader.updateFamiliareACarico(cf_old, codiceFiscale, sequIdProtocollo, dfd.getIdProtocollo(), dfd.getAnnoInvio());
							}
						} catch (Exception e) {
							LOG.error("Errore inserimento D_DETRAZIONE_FAMILIARE; CF_OLD: " + cf_old + " CF_NEW: " + cud.getTestata().getAnagrafica().getCodFiscaleAmministrato());
							// crea scarto con codice errore 818
							errore = ConstantsScarto.ERRORE_INSERT_D_DETRAZIONE_FAMILIARE_DESC + " CF_OLD: " + cf_old + " CF_NEW: " + cud.getTestata().getAnagrafica().getCodFiscaleAmministrato();
							scarto.inserimentoScarto(serviceFacadeJDBCCedLoader, nomeFile_origine, " ", ConstantsScarto.ERRORE_INSERT_D_DETRAZIONE_FAMILIARE, errore, idOrigineDati);
							throw e;
						}
						// DELETE U_DETRAZIONE_FAMILIARE
						try {
							serviceFacadeJDBCCedLoader.deleteDetrazioneFamiliare(cf_old);
						} catch (Exception e) {
							LOG.error("Errore eliminazione D_DETRAZIONE_FAMILIARE; CF_OLD: " + cf_old + " CF_NEW: " + cud.getTestata().getAnagrafica().getCodFiscaleAmministrato());
							// crea scarto con codice errore 819
							errore = ConstantsScarto.ERRORE_DELETE_D_DETRAZIONE_FAMILIARE_DESC + " CF_OLD: " + cf_old + " CF_NEW: " + cud.getTestata().getAnagrafica().getCodFiscaleAmministrato();
							scarto.inserimentoScarto(serviceFacadeJDBCCedLoader, nomeFile_origine, " ", ConstantsScarto.ERRORE_DELETE_D_DETRAZIONE_FAMILIARE, errore, idOrigineDati);
							throw e;
						}
						// D_DETRAZIONI_BY_CF
						// UPDATE D_PARTITA_STIPENDIALE
						try {
							serviceFacadeJDBCCedLoader.updatePartitaStipendiale(cf_old, cud.getTestata().getAnagrafica().getCodFiscaleAmministrato());

						} catch (Exception e) {
							LOG.error("Errore aggiornamento D_PARTITA_STIPENDIALE; CF_OLD: " + cf_old + " CF_NEW: " + cud.getTestata().getAnagrafica().getCodFiscaleAmministrato());
							// crea scarto con codice errore 820
							errore = ConstantsScarto.ERRORE_UPDATE_D_PARTITA_STIPENDIALE_DESC + " CF_OLD: " + cf_old + " CF_NEW: " + cud.getTestata().getAnagrafica().getCodFiscaleAmministrato();
							scarto.inserimentoScarto(serviceFacadeJDBCCedLoader, nomeFile_origine, " ", ConstantsScarto.ERRORE_UPDATE_D_PARTITA_STIPENDIALE, errore, idOrigineDati);
							throw e;
						}
						// UPDATE D_730_UPLOAD
						try {
							serviceFacadeJDBCCedLoader.updateD730Upload(cf_old, cud.getTestata().getAnagrafica().getCodFiscaleAmministrato());
						} catch (Exception e) {
							LOG.error("Errore aggiornamento D_730_UPLOAD; CF_OLD: " + cf_old + " CF_NEW: " + cud.getTestata().getAnagrafica().getCodFiscaleAmministrato());
							// crea scarto con codice errore 821
							errore = ConstantsScarto.ERRORE_UPDATE_D_730_UPLOAD_DESC + " CF_OLD: " + cf_old + " CF_NEW: " + cud.getTestata().getAnagrafica().getCodFiscaleAmministrato();
							scarto.inserimentoScarto(serviceFacadeJDBCCedLoader, nomeFile_origine, " ", ConstantsScarto.ERRORE_UPDATE_D_730_UPLOAD, errore, idOrigineDati);
							throw e;
						}
						// UPDATE D_730
						try {
							serviceFacadeJDBCCedLoader.updateD730(cf_old, cud.getTestata().getAnagrafica().getCodFiscaleAmministrato());
						} catch (Exception e) {
							LOG.error("Errore aggiornamento D_730; CF_OLD: " + cf_old + " CF_NEW: " + cud.getTestata().getAnagrafica().getCodFiscaleAmministrato());
							// crea scarto con codice errore 822
							errore = ConstantsScarto.ERRORE_UPDATE_D_730_DESC + " CF_OLD: " + cf_old + " CF_NEW: " + cud.getTestata().getAnagrafica().getCodFiscaleAmministrato();
							scarto.inserimentoScarto(serviceFacadeJDBCCedLoader, nomeFile_origine, " ", ConstantsScarto.ERRORE_UPDATE_D_730, errore, idOrigineDati);
							throw e;
						}
						// UPDATE D_PPI_ANAGRAFICA_DIPENDENTE
						try {
							serviceFacadeJDBCCedLoader.updateDPpiAnagraficaDipendente(cf_old, cud.getTestata().getAnagrafica().getCodFiscaleAmministrato());
						} catch (Exception e) {
							LOG.error("Errore aggiornamento D_PPI_ANAGRAFICA_DIPENDENTE; CF_OLD: " + cf_old + " CF_NEW: " + cud.getTestata().getAnagrafica().getCodFiscaleAmministrato());
							// crea scarto con codice errore 823
							errore = ConstantsScarto.ERRORE_UPDATE_D_PPI_ANAGRAFICA_DIPENDENTE_DESC + " CF_OLD: " + cf_old + " CF_NEW: " + cud.getTestata().getAnagrafica().getCodFiscaleAmministrato();
							scarto.inserimentoScarto(serviceFacadeJDBCCedLoader, nomeFile_origine, " ", ConstantsScarto.ERRORE_UPDATE_D_PPI_ANAGRAFICA_DIPENDENTE, errore, idOrigineDati);
							throw e;
						}
						// UPDATE D_PPI_DATI_PRESTITO_RICHIESTO
						try {
							serviceFacadeJDBCCedLoader.updateDPpiDatiPrestitoRichiesto(cf_old, cud.getTestata().getAnagrafica().getCodFiscaleAmministrato());
						} catch (Exception e) {
							LOG.error("Errore aggiornamento D_PPI_DATI_PRESTITO_RICHIESTO; CF_OLD: " + cf_old + " CF_NEW: " + cud.getTestata().getAnagrafica().getCodFiscaleAmministrato());
							// crea scarto con codice errore 824
							errore = ConstantsScarto.ERRORE_UPDATE_D_PPI_DATI_PRESTITO_RICHIESTO_DESC + " CF_OLD: " + cf_old + " CF_NEW: " + cud.getTestata().getAnagrafica().getCodFiscaleAmministrato();
							scarto.inserimentoScarto(serviceFacadeJDBCCedLoader, nomeFile_origine, " ", ConstantsScarto.ERRORE_UPDATE_D_PPI_DATI_PRESTITO_RICHIESTO, errore, idOrigineDati);
							throw e;
						}
						// UPDATE D_PPI_QUINTO_CEDIBILE
						try {
							serviceFacadeJDBCCedLoader.updateDPpiQuintoCedibile(cf_old, cud.getTestata().getAnagrafica().getCodFiscaleAmministrato());
						} catch (Exception e) {
							LOG.error("Errore aggiornamento D_PPI_QUINTO_CEDIBILE; CF_OLD: " + cf_old + " CF_NEW: " + cud.getTestata().getAnagrafica().getCodFiscaleAmministrato());
							// crea scarto con codice errore 825
							errore = ConstantsScarto.ERRORE_UPDATE_D_PPI_QUINTO_CEDIBILE_DESC + " CF_OLD: " + cf_old + " CF_NEW: " + cud.getTestata().getAnagrafica().getCodFiscaleAmministrato();
							scarto.inserimentoScarto(serviceFacadeJDBCCedLoader, nomeFile_origine, " ", ConstantsScarto.ERRORE_UPDATE_D_PPI_QUINTO_CEDIBILE, errore, idOrigineDati);
							throw e;
						}
						// UPDATE D_PPI_STORICO_DATI_PRESTITO
						try {
							serviceFacadeJDBCCedLoader.updateDPpiStoricoDatiPrestito(cf_old, cud.getTestata().getAnagrafica().getCodFiscaleAmministrato());
						} catch (Exception e) {
							LOG.error("Errore aggiornamento D_PPI_STORICO_DATI_PRESTITO; CF_OLD: " + cf_old + " CF_NEW: " + cud.getTestata().getAnagrafica().getCodFiscaleAmministrato());
							// crea scarto con codice errore 826
							errore = ConstantsScarto.ERRORE_UPDATE_D_PPI_STORICO_DATI_PRESTITO_DESC + " CF_OLD: " + cf_old + " CF_NEW: " + cud.getTestata().getAnagrafica().getCodFiscaleAmministrato();
							scarto.inserimentoScarto(serviceFacadeJDBCCedLoader, nomeFile_origine, " ", ConstantsScarto.ERRORE_UPDATE_D_PPI_STORICO_DATI_PRESTITO, errore, idOrigineDati);
							throw e;
						}
						// DELETE D_UTENTE_BY_CF
						try {
							serviceFacadeJDBCCedLoader.deleteCfOld(cf_old);
						} catch (Exception e) {
							LOG.error("Errore eliminazione D_UTENTE; CF_OLD: " + cf_old + " CF_NEW: " + cud.getTestata().getAnagrafica().getCodFiscaleAmministrato());
							// crea scarto con codice errore 827
							errore = ConstantsScarto.ERRORE_DELETE_D_UTENTE_DESC + " CF_OLD: " + cf_old + " CF_NEW: " + cud.getTestata().getAnagrafica().getCodFiscaleAmministrato();
							scarto.inserimentoScarto(serviceFacadeJDBCCedLoader, nomeFile_origine, " ", ConstantsScarto.ERRORE_DELETE_D_UTENTE, errore, idOrigineDati);
							throw e;
						}
						cf_old = null;
					}
					// FINE aggiornamento CF
				}

				// Query :S_CEDOLINO_CHECK_ISCRIZIONE_PARTITA_EXISTS --- FINE
				// UPDATE D_PARTITA_STIPENDIALE - stato partita
				try {
					serviceFacadeJDBCCedLoader.updatePartitaStipendialeStato(statoPartita, partitaStipendiale);
				} catch (Exception e) {
					// crea scarto con codice errore 811
					errore = ConstantsScarto.ERRORE_PARTITA_STIPENDIALE_DESC + "partitaStipendiale: " + partitaStipendiale;
					scarto.inserimentoScarto(serviceFacadeJDBCCedLoader, nomeFile_origine, " ", ConstantsScarto.ERRORE_PARTITA_STIPENDIALE, errore, idOrigineDati);
					throw e;
				}
				/*
				 * // File exist String directory = filePDFDir + "/CUD/" + rata
				 * + "/"+ ultCifreIscr.toString(); //logger.error("directory :"
				 * + directory); File propFile = null; try {
				 *
				 * propFile = new File(directory, nomeFilePDF);
				 *
				 * if (!propFile.exists()) throw new Exception(); } catch
				 * (Exception e) { logger.error("File pdf non trovato :" +
				 * nomeFilePDF); // crea scarto con codice errore 400 errore =
				 * ConstantsScarto.ERRORE_FILE_PDF_INESISTENTE_DESC +
				 * "Nome file pdf: " + nomeFilePDF;
				 * scarto.inserimentoScarto(serviceFacadeJDBCCedLoader,
				 * nomeFile_origine, nomeFilePDF,
				 * ConstantsScarto.ERRORE_FILE_PDF_INESISTENTE, errore,
				 * idOrigineDati); throw e; }
				 * //LOG.error("File pdf trovato :" + nomeFilePDF);
				 */

				try {
					serviceFacadeJDBCCedLoader.insertDCud(rata, nomeFilePDF, partitaStipendiale, idCud, codEnte, codDpt,
							codUfficioServizio, nomeFile_origine, numeroCiclo, codiTipoEmissione);
				} catch (Exception e) {
					LOG.error("L''associazione codice ente, dpt e codice ufficio di servizio non risulta essere presente nell''anagrafica degli enti!");
					// crea scarto con codice errore 400
					errore = ConstantsScarto.ERRORE_CODICE_ENTE_NON_PRESENTE_DESC + "Nome file: " + nomeFile_origine;
					scarto.inserimentoScarto(serviceFacadeJDBCCedLoader, nomeFile_origine, " ", ConstantsScarto.ERRORE_CODICE_ENTE_NON_PRESENTE,
							errore, idOrigineDati);
					throw e;
				}
				// fine for su oggetti
			}

			if (errore == "") {
				try {
					// Restituisce il numero di oggetti contenuti nel file .xml
					int numNumeroOggetti = serviceFacadeJDBCCedLoader.countNumeroOggetti(nomeFile_origine);
					//int numNumeroOggetti = serviceFacadeJDBCCedLoader.countNumeroOggettiCud(nomeFile_origine);
					LOG.info("NumeroCedolini: " + numNumeroOggetti + " File origine: " + nomeFile_origine);
					// Restituisce il numero di utenti contenuti nel file .xml
					//int numeroUtenti = serviceFacadeJDBCCedLoader.countNumeroUtenti(nomeFile_origine);
					int numeroUtenti = serviceFacadeJDBCCedLoader.countNumeroUtentiCud(nomeFile_origine);
					LOG.info("numeroUtenti: " + numeroUtenti + " File origine: " + nomeFile_origine);
					// Restituisce la somma degli importi netti dei singoli cedolini contenuti nel file .xml

					//Double totImportiNetti = serviceFacadeJDBCCedLoader.countNumTotaleModello(rata, codiTipoEmissione, numeroCiclo);
					Double totImportiNetti = serviceFacadeJDBCCedLoader.countNumTotaleModelloCud(rata, codiTipoEmissione, numeroCiclo);
					LOG.info("totImportiNetti: " + totImportiNetti + " File origine: " + nomeFile_origine);
					// Restituisce la numerositï¿½ degli scarti per ciascun file xml
					int numRecordScarto = 1;
					// Aggiorna i dati generali riguardanti la provincia
					serviceFacadeJDBCCedLoader.updateDXmlProvincia(numNumeroOggetti, numeroUtenti, numRecordScarto, nomeFile_origine, codDpt);
					// update D_XMLTOTALE
					serviceFacadeJDBCCedLoader.updateDXmlTotale(totImportiNetti, rata, elaborazione, codiTipoEmissione);
					// INSERT INTO D_XMLTOTALEPUBBLICAZIONE
					if (!(serviceFacadeJDBCCedLoader.countDXmlTotalePubblicazione(idPubblicazione, rata, elaborazione, codiTipoEmissione) > 0)) {
						serviceFacadeJDBCCedLoader.insertDXmlTotalePubblicazione(idPubblicazione, sequIdFileElaborato, codiStato, rata,
								codiTipoEmissione, elaborazione);
					}

					// INSERT INTO D_XMLTOTALEPROVINCIA
					if (!(serviceFacadeJDBCCedLoader.countDXmlTotaleProvincia(idPubblicazione, codDpt, numeroCiclo, rata,
							elaborazione, codiTipoEmissione) > 0)) {
						serviceFacadeJDBCCedLoader.insertDXmlTotaleProvincia(idPubblicazione, codDpt, numeroCiclo, numeroUtenti, numNumeroOggetti, rata,
								sequIdFileElaborato, codiTipoEmissione, elaborazione);
					} else {
						// updateDXmlTotaleProvincia
						serviceFacadeJDBCCedLoader.updateDXmlTotaleProvincia(idPubblicazione, codDpt, numeroCiclo, numeroUtenti, numNumeroOggetti, rata,
								codiTipoEmissione, elaborazione);
					}

					// Restituisce la numerositï¿½ dei cedolini per ciascun Ente contenuti nel file .xml
					//NumerositaEnteDocument = serviceFacadeJDBCCedLoader.getNumerositaXEnte(rata, codiTipoEmissione, numeroCiclo, codDpt);
					NumerositaEnteDocument = serviceFacadeJDBCCedLoader.getNumerositaXEnteCud(rata, codiTipoEmissione, numeroCiclo, codDpt);

					for (NumerositaEnteDocument ned : NumerositaEnteDocument) {
						if (!(serviceFacadeJDBCCedLoader.countDXmlTotaleXEnte(codiTipoEmissione, elaborazione, rata, ned.getCodiEnte()) > 0)) {
							// Inserisce un record in D_XMLTOTALEXENTE
							serviceFacadeJDBCCedLoader.insertDXmlTotalexEnte(ned.getCountEnte(), ned.getCodiEnte(), sequIdFileElaborato, rata,
									codiTipoEmissione, elaborazione);
						} else {
							serviceFacadeJDBCCedLoader.updateDXmlTotaleXEnte(ned.getCountEnte(), ned.getCodiEnte(), rata, codiTipoEmissione, elaborazione);
						}

						if (!(serviceFacadeJDBCCedLoader.countDXmlTotaleProvinciaXEnte(ned.getCodiEnte(), idPubblicazione, codDpt, numeroCiclo, rata,
								codiTipoEmissione, elaborazione) > 0)) {

							serviceFacadeJDBCCedLoader.insertDXmlTotaleProvinciaxEnte(ned.getCodiEnte(), idPubblicazione, codDpt, numeroCiclo, ned.getCountEnte(),
									sequIdFileElaborato, rata, codiTipoEmissione, elaborazione);
						} else {
							serviceFacadeJDBCCedLoader.updateDXmlTotaleProvinciaXEnte(ned.getCodiEnte(), idPubblicazione, codDpt, numeroCiclo, ned.getCountEnte(),
									rata, codiTipoEmissione, elaborazione);
						}
					}

				} catch (Exception e) {
					// errore 407
					LOG.error(ConstantsScarto.ERRORE_CARICAMENTI_TOTALE_DESC + "Nome file: " + nomeFile_origine, e);
					errore = ConstantsScarto.ERRORE_CARICAMENTI_TOTALE_DESC + "Nome file: " + nomeFile_origine;
					scarto.inserimentoScarto(serviceFacadeJDBCCedLoader, nomeFile_origine, " ", ConstantsScarto.ERRORE_CARICAMENTI_TOTALE, errore, idOrigineDati);
					throw e;
				}
			}

		} catch (Exception e) {
			LOG.error(ConstantsScarto.ERRORE_FILE_GENERICO_DESC + "Nome file: " + nomeFile_origine, e);
			errore = ConstantsScarto.ERRORE_FILE_GENERICO_DESC + "Nome file: " + nomeFile_origine;
			scarto.inserimentoScarto(serviceFacadeJDBCCedLoader, nomeFile_origine, " ", ConstantsScarto.ERRORE_FILE_GENERICO, errore, idOrigineDati);
			throw e;
		}
		// fine elabora CUD
	}

	public void setResource(Resource resource) {
		this.nomeFile_origine = resource.getFilename();
	}

	public void setIdPostemissione(int idPostemissione) {
		this.idPostemissione = idPostemissione;
	}

	public void setCaricaArtefattiOracle(boolean caricaArtefattiOracle) {
		this.caricaArtefattiOracle = caricaArtefattiOracle;
	}

	public void setMappaTipoEmissioni(Map<String, String> mappaTipoEmissioni) {
		this.mappaTipoEmissioni = mappaTipoEmissioni;
	}

	public void setTipoPostemissione(String tipoPostemissione) {
		this.tipoPostemissione = tipoPostemissione;
	}

	public void setFilePDFDir(String filePDFDir) {
		this.filePDFDir = filePDFDir;
	}

}
