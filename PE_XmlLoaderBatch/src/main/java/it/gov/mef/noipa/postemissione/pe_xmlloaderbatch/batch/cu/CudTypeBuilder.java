package it.gov.mef.noipa.postemissione.pe_xmlloaderbatch.batch.cu;

import java.util.Calendar;
import java.util.GregorianCalendar;

import org.apache.log4j.Logger;
import org.springframework.stereotype.Component;

import it.gov.mef.noipa.postemissione.parser.autogenerated.cu.cu.Cedolini.Cu;
import it.gov.mef.noipa.postemissione.parser.autogenerated.cud.AnagraficaType;
import it.gov.mef.noipa.postemissione.parser.autogenerated.cud.CudType;
import it.gov.mef.noipa.postemissione.parser.autogenerated.cud.LINGUATYPE;
import it.gov.mef.noipa.postemissione.parser.autogenerated.cud.MatricolaType;

@Component
public class CudTypeBuilder {
	
	private static final Logger logger = Logger.getLogger(CudTypeBuilder.class);
	
	
	public CudType buildCudType ( Cu cu ) {
		CudType cudType = new CudType();
		cudType.setTestata(buildTestata(cu));
		cudType.setDatiGenerali(buildDatiGenerali(cu));
		cudType.setDatiPrevidenziali(buildDatiPrevidenziali(cu));
		cudType.getTestata().setIDCedolino(creaIndiceCud(cudType.getDatiGenerali().getIscrizione().getIscrizione(), cudType.getTestata().getLingua().value()));
		return cudType;
	}
	
	private String creaIndiceCud(String iscrizione, String lingua) {
		StringBuffer sb = new StringBuffer("");
		sb.append("CUD_").append(iscrizione).append("_").append(getAnnoDichiarazione()).append("_").append(lingua);
		return sb.toString();
	}
	
	private CudType.Testata buildTestata( Cu cu ) {
		
		CudType.Testata testata = new CudType.Testata();
		
		if ("t".equals(cu.getLINGUA()))
			testata.setLingua(LINGUATYPE.valueOf(LINGUATYPE.T.toString()));
		else
			testata.setLingua(LINGUATYPE.valueOf(LINGUATYPE.I.toString()));
		
		testata.setRata(getAnnoDichiarazione());
		testata.setDescrRata("certificazione unica "+ testata.getRata());
		
		testata.setEnteApp(buildEnteApp(cu));
		
		AnagraficaType anagraficaType = new AnagraficaType();
		
		String gg = "" ;
		String mm = "" ;
		String aa = "" ;
		
		gg = String.valueOf(cu.getA5G().intValue());
		mm = String.valueOf(cu.getA5M().intValue());
		aa = String.valueOf(cu.getA5A().intValue());
		
		logger.debug("buildTestata cu.getA5G()=["+cu.getA5G()+"] cu.getA5M()=["+cu.getA5M()+"] cu.getA5A()=["+cu.getA5A()+"]");
		
		if (gg.length()<2) gg = "0" + gg;
		if (mm.length()<2) mm = "0" + mm;
		
		String dataDiNascita = gg + "/" + mm + "/" + aa ;
				
		anagraficaType.setDataNascita(dataDiNascita);
		anagraficaType.setCognome(cu.getA2());
		anagraficaType.setNome(cu.getA3());
		anagraficaType.setCodFiscaleAmministrato(cu.getCODICEFISCALE());
		anagraficaType.setMatricola(buildIscrizione(cu));
		testata.setAnagrafica(anagraficaType);
		
		return testata;
	}
	
	private CudType.Testata.EnteApp buildEnteApp ( Cu cu ) {
		CudType.Testata.EnteApp enteApp = new CudType.Testata.EnteApp();
		enteApp.setDesEnte(cu.getDATORELAV2());
		enteApp.setCodFiscEnte(cu.getDATORELAV1());
		enteApp.setCodEnte(""); // TODO SPLIT CONTENUTO TAG BARCODE PER SPAZIO , ITEM 2 
		enteApp.setCodUffResp(""); // TODO richiesta info Stefano Rosa Tracciato Record CU - Dati Ente di appartenenza
		enteApp.setDesUffResp(""); // TODO richiesta info Stefano Rosa Tracciato Record CU - Dati Ente di appartenenza
		enteApp.setDesSedeUffServizio(""); // TODO richiesta info Stefano Rosa Tracciato Record CU - Dati Ente di appartenenza
		enteApp.setCodSedeUffServizio(""); // TODO richiesta info Stefano Rosa Tracciato Record CU - Dati Ente di appartenenza
		return enteApp;
	}
	
	private CudType.DatiGenerali buildDatiGenerali( Cu cu ) {
		CudType.DatiGenerali datiGenerali = new CudType.DatiGenerali();
		datiGenerali.setAnagraficaDipendente(buildAnagraficaDipendente(cu));
		datiGenerali.setIscrizione(buildIscrizione(cu));
		//datiGenerali.setBarcode(cu.get); // TODO richiesta LAND add tag <BARCODE>
		datiGenerali.setUfficioServizio(cu.getDATORELAV2());
		//datiGenerali.setDpt(value);// TODO richiesta LAND add tag <CODICEDPT>
		return datiGenerali;
	}
	
	private CudType.DatiPrevidenziali buildDatiPrevidenziali ( Cu cu ) {
		
		CudType.DatiPrevidenziali datiPrevidenziali = new CudType.DatiPrevidenziali();
		CudType.DatiPrevidenziali.INPDAP inpdap = new CudType.DatiPrevidenziali.INPDAP();
		inpdap.setAnnoRif(cu.getDATORELAV1());
		
		return datiPrevidenziali;
	}
	
	private CudType.DatiGenerali.AnagraficaDipendente buildAnagraficaDipendente(Cu cu){

		CudType.DatiGenerali.AnagraficaDipendente anagraficaDipendente = new CudType.DatiGenerali.AnagraficaDipendente();
		
		AnagraficaType anagraficaType = new AnagraficaType();
		
		anagraficaType.setCodFiscaleAmministrato(cu.getCODICEFISCALE());
		anagraficaType.setCognome(cu.getA2());
		anagraficaType.setNome(cu.getA3());
		
		anagraficaDipendente.setAnagrafica(anagraficaType);
		
		return anagraficaDipendente;		
	}
	
	private MatricolaType buildIscrizione ( Cu cu ){
		MatricolaType matricolaType = new MatricolaType();
		matricolaType.setIscrizione(cu.getISCRIZIONE());
		return matricolaType;
	}
	
	// restituisce sempre l'anno corrente meno 1
	private static String getAnnoDichiarazione() {
		Calendar calendar = GregorianCalendar.getInstance();
		calendar.add(Calendar.YEAR, -1);
		return String.valueOf(calendar.get(Calendar.YEAR));
	}

	
	// restituisce sempre l'anno corrente meno 1
	public static String getRata() {
		Calendar calendar = GregorianCalendar.getInstance();
		return String.valueOf(calendar.get(Calendar.YEAR)) +  String.valueOf(calendar.get(Calendar.MONTH));
	}
	
}
